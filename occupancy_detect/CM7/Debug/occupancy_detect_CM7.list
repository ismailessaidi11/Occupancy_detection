
occupancy_detect_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008f84  08008f84  00009f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  0000b138  2**0
                  CONTENTS
  4 .ARM          00000008  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009038  08009038  0000b138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009038  08009038  0000a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800903c  0800903c  0000a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  24000000  08009040  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  24000138  08009178  0000b138  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  0000c000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b9c  00000000  00000000  0000b166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  00022d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000258b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf4  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af6c  00000000  00000000  00027654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f6d  00000000  00000000  000625c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00181ea7  00000000  00000000  0007b52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fd3d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b34  00000000  00000000  001fd418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00201f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f6c 	.word	0x08008f6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08008f6c 	.word	0x08008f6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
    }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f001 f879 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f91b 	bl	80009e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007aa:	4b7d      	ldr	r3, [pc, #500]	@ (80009a0 <main+0x204>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a7b      	ldr	r2, [pc, #492]	@ (80009a0 <main+0x204>)
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b79      	ldr	r3, [pc, #484]	@ (80009a0 <main+0x204>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f002 f989 	bl	8002ae0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f002 f99f 	bl	8002b14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007da:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007dc:	bf00      	nop
 80007de:	4b70      	ldr	r3, [pc, #448]	@ (80009a0 <main+0x204>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d104      	bne.n	80007f4 <main+0x58>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	61fa      	str	r2, [r7, #28]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dcf4      	bgt.n	80007de <main+0x42>
if ( timeout < 0 )
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <main+0x62>
{
Error_Handler();
 80007fa:	f000 fbed 	bl	8000fd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 fa43 	bl	8000c88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000802:	f000 f959 	bl	8000ab8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000806:	f000 f997 	bl	8000b38 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800080a:	f000 f9f1 	bl	8000bf0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  float co2_ppm, temperature, relative_humidity;
  int16_t err;
  uint16_t interval_in_seconds = 60;//900;
 800080e:	233c      	movs	r3, #60	@ 0x3c
 8000810:	833b      	strh	r3, [r7, #24]

  if (HAL_UART_Transmit(&huart3, INIT, countof(INIT)-1, 1000) != HAL_OK)
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	2225      	movs	r2, #37	@ 0x25
 8000818:	4962      	ldr	r1, [pc, #392]	@ (80009a4 <main+0x208>)
 800081a:	4863      	ldr	r0, [pc, #396]	@ (80009a8 <main+0x20c>)
 800081c:	f006 f96e 	bl	8006afc <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d015      	beq.n	8000852 <main+0xb6>
  {
	  Error_Handler();
 8000826:	f000 fbd7 	bl	8000fd8 <Error_Handler>
  }

  /* Busy loop for initialization, because the main loop does not work without
   * a sensor.
   */
  while (scd30_probe(&hi2c1) != NO_ERROR) {
 800082a:	e012      	b.n	8000852 <main+0xb6>
	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 800082c:	2104      	movs	r1, #4
 800082e:	485f      	ldr	r0, [pc, #380]	@ (80009ac <main+0x210>)
 8000830:	f002 f93b 	bl	8002aaa <HAL_GPIO_TogglePin>
	  // probing failed
	  if (HAL_UART_Transmit(&huart3, PROBING_FAIL, countof(PROBING_FAIL)-1, 1000) != HAL_OK)
 8000834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000838:	221d      	movs	r2, #29
 800083a:	495d      	ldr	r1, [pc, #372]	@ (80009b0 <main+0x214>)
 800083c:	485a      	ldr	r0, [pc, #360]	@ (80009a8 <main+0x20c>)
 800083e:	f006 f95d 	bl	8006afc <HAL_UART_Transmit>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <main+0xb0>
	  {
		  Error_Handler();
 8000848:	f000 fbc6 	bl	8000fd8 <Error_Handler>
	  }
      sensirion_sleep_usec(1000000u);
 800084c:	4859      	ldr	r0, [pc, #356]	@ (80009b4 <main+0x218>)
 800084e:	f000 fdfd 	bl	800144c <sensirion_sleep_usec>
  while (scd30_probe(&hi2c1) != NO_ERROR) {
 8000852:	4859      	ldr	r0, [pc, #356]	@ (80009b8 <main+0x21c>)
 8000854:	f000 fb14 	bl	8000e80 <scd30_probe>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e6      	bne.n	800082c <main+0x90>
  }
  // probing was successful

  if (HAL_UART_Transmit(&huart3, PROBING_SUCCESS, countof(PROBING_SUCCESS)-1, 1000) != HAL_OK)
 800085e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000862:	2222      	movs	r2, #34	@ 0x22
 8000864:	4955      	ldr	r1, [pc, #340]	@ (80009bc <main+0x220>)
 8000866:	4850      	ldr	r0, [pc, #320]	@ (80009a8 <main+0x20c>)
 8000868:	f006 f948 	bl	8006afc <HAL_UART_Transmit>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <main+0xda>
  {
	  Error_Handler();
 8000872:	f000 fbb1 	bl	8000fd8 <Error_Handler>
  }


  scd30_set_measurement_interval(&hi2c1, interval_in_seconds);
 8000876:	8b3b      	ldrh	r3, [r7, #24]
 8000878:	4619      	mov	r1, r3
 800087a:	484f      	ldr	r0, [pc, #316]	@ (80009b8 <main+0x21c>)
 800087c:	f000 fac5 	bl	8000e0a <scd30_set_measurement_interval>
  sensirion_sleep_usec(20000u);
 8000880:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000884:	f000 fde2 	bl	800144c <sensirion_sleep_usec>
  scd30_start_periodic_measurement(&hi2c1, 0);
 8000888:	2100      	movs	r1, #0
 800088a:	484b      	ldr	r0, [pc, #300]	@ (80009b8 <main+0x21c>)
 800088c:	f000 fa50 	bl	8000d30 <scd30_start_periodic_measurement>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t data_ready = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	807b      	strh	r3, [r7, #2]
      uint16_t timeout = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	837b      	strh	r3, [r7, #26]

      /* Poll data_ready flag until data is available. Allow 20% more than
       * the measurement interval to account for clock imprecision of the
       * sensor.
       */
      for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1200000);
 8000898:	2300      	movs	r3, #0
 800089a:	837b      	strh	r3, [r7, #26]
 800089c:	e023      	b.n	80008e6 <main+0x14a>
           ++timeout) {
          err = scd30_get_data_ready(&hi2c1, &data_ready);
 800089e:	1cbb      	adds	r3, r7, #2
 80008a0:	4619      	mov	r1, r3
 80008a2:	4845      	ldr	r0, [pc, #276]	@ (80009b8 <main+0x21c>)
 80008a4:	f000 fad6 	bl	8000e54 <scd30_get_data_ready>
 80008a8:	4603      	mov	r3, r0
 80008aa:	82fb      	strh	r3, [r7, #22]
          if (err != NO_ERROR) {
 80008ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00f      	beq.n	80008d4 <main+0x138>
        	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	483d      	ldr	r0, [pc, #244]	@ (80009ac <main+0x210>)
 80008b8:	f002 f8f7 	bl	8002aaa <HAL_GPIO_TogglePin>

        	  /* Error reading data_ready flag */
        	  if (HAL_UART_Transmit(&huart3, NOT_READY, countof(NOT_READY)-1, 1000) != HAL_OK)
 80008bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c0:	2222      	movs	r2, #34	@ 0x22
 80008c2:	493f      	ldr	r1, [pc, #252]	@ (80009c0 <main+0x224>)
 80008c4:	4838      	ldr	r0, [pc, #224]	@ (80009a8 <main+0x20c>)
 80008c6:	f006 f919 	bl	8006afc <HAL_UART_Transmit>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <main+0x138>
        	  {
        		  Error_Handler();
 80008d0:	f000 fb82 	bl	8000fd8 <Error_Handler>
        	  }
          }
          if (data_ready) {
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d110      	bne.n	80008fc <main+0x160>
              break;
          }
          sensirion_sleep_usec(100000);
 80008da:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <main+0x228>)
 80008dc:	f000 fdb6 	bl	800144c <sensirion_sleep_usec>
           ++timeout) {
 80008e0:	8b7b      	ldrh	r3, [r7, #26]
 80008e2:	3301      	adds	r3, #1
 80008e4:	837b      	strh	r3, [r7, #26]
      for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1200000);
 80008e6:	8b7b      	ldrh	r3, [r7, #26]
 80008e8:	4a36      	ldr	r2, [pc, #216]	@ (80009c4 <main+0x228>)
 80008ea:	fb03 f202 	mul.w	r2, r3, r2
 80008ee:	8b3b      	ldrh	r3, [r7, #24]
 80008f0:	4935      	ldr	r1, [pc, #212]	@ (80009c8 <main+0x22c>)
 80008f2:	fb01 f303 	mul.w	r3, r1, r3
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbd1      	blt.n	800089e <main+0x102>
 80008fa:	e000      	b.n	80008fe <main+0x162>
              break;
 80008fc:	bf00      	nop
      }
      if (!data_ready) {
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10c      	bne.n	800091e <main+0x182>
    	  /* Timeout waiting for data_ready flag */
		  if (HAL_UART_Transmit(&huart3, READY_TIMEOUT, countof(READY_TIMEOUT)-1, 1000) != HAL_OK)
 8000904:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000908:	2227      	movs	r2, #39	@ 0x27
 800090a:	4930      	ldr	r1, [pc, #192]	@ (80009cc <main+0x230>)
 800090c:	4826      	ldr	r0, [pc, #152]	@ (80009a8 <main+0x20c>)
 800090e:	f006 f8f5 	bl	8006afc <HAL_UART_Transmit>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d040      	beq.n	800099a <main+0x1fe>
		  {
			  Error_Handler();
 8000918:	f000 fb5e 	bl	8000fd8 <Error_Handler>
 800091c:	e7b8      	b.n	8000890 <main+0xf4>

      /* Measure co2, temperature and relative humidity and store into
       * variables.
       */
      err =
          scd30_read_measurement(&hi2c1, &co2_ppm, &temperature, &relative_humidity);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	f107 020c 	add.w	r2, r7, #12
 8000926:	f107 0110 	add.w	r1, r7, #16
 800092a:	4823      	ldr	r0, [pc, #140]	@ (80009b8 <main+0x21c>)
 800092c:	f000 fa22 	bl	8000d74 <scd30_read_measurement>
 8000930:	4603      	mov	r3, r0
 8000932:	82fb      	strh	r3, [r7, #22]
      if (err != NO_ERROR) {
 8000934:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00c      	beq.n	8000956 <main+0x1ba>
          /* error reading measurement */
    	  if (HAL_UART_Transmit(&huart3, MEASURE_ERROR, countof(MEASURE_ERROR)-1, 1000) != HAL_OK)
 800093c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000940:	221d      	movs	r2, #29
 8000942:	4923      	ldr	r1, [pc, #140]	@ (80009d0 <main+0x234>)
 8000944:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <main+0x20c>)
 8000946:	f006 f8d9 	bl	8006afc <HAL_UART_Transmit>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d09f      	beq.n	8000890 <main+0xf4>
		  {
			  Error_Handler();
 8000950:	f000 fb42 	bl	8000fd8 <Error_Handler>
 8000954:	e79c      	b.n	8000890 <main+0xf4>
		  }

      } else {
          /* Display values */
    	  display_values(display_str, temperature, co2_ppm, relative_humidity, office_number, occupancy);
 8000956:	edd7 7a03 	vldr	s15, [r7, #12]
 800095a:	ed97 7a04 	vldr	s14, [r7, #16]
 800095e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <main+0x238>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <main+0x23c>)
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	eeb0 1a66 	vmov.f32	s2, s13
 8000970:	eef0 0a47 	vmov.f32	s1, s14
 8000974:	eeb0 0a67 	vmov.f32	s0, s15
 8000978:	4818      	ldr	r0, [pc, #96]	@ (80009dc <main+0x240>)
 800097a:	f000 fa91 	bl	8000ea0 <display_values>
    	  if (HAL_UART_Transmit(&huart3, (uint8_t *)display_str, countof(display_str)-1, 1000) != HAL_OK)
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	2263      	movs	r2, #99	@ 0x63
 8000984:	4915      	ldr	r1, [pc, #84]	@ (80009dc <main+0x240>)
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <main+0x20c>)
 8000988:	f006 f8b8 	bl	8006afc <HAL_UART_Transmit>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	f43f af7e 	beq.w	8000890 <main+0xf4>
    	  {
    		  Error_Handler();
 8000994:	f000 fb20 	bl	8000fd8 <Error_Handler>
 8000998:	e77a      	b.n	8000890 <main+0xf4>
          continue;
 800099a:	bf00      	nop
  {
 800099c:	e778      	b.n	8000890 <main+0xf4>
 800099e:	bf00      	nop
 80009a0:	58024400 	.word	0x58024400
 80009a4:	24000008 	.word	0x24000008
 80009a8:	240001cc 	.word	0x240001cc
 80009ac:	58022400 	.word	0x58022400
 80009b0:	24000030 	.word	0x24000030
 80009b4:	000f4240 	.word	0x000f4240
 80009b8:	24000154 	.word	0x24000154
 80009bc:	24000050 	.word	0x24000050
 80009c0:	24000074 	.word	0x24000074
 80009c4:	000186a0 	.word	0x000186a0
 80009c8:	00124f80 	.word	0x00124f80
 80009cc:	24000098 	.word	0x24000098
 80009d0:	240000c0 	.word	0x240000c0
 80009d4:	240002c4 	.word	0x240002c4
 80009d8:	240000de 	.word	0x240000de
 80009dc:	24000260 	.word	0x24000260

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	@ 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ea:	224c      	movs	r2, #76	@ 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fe0a 	bl	8008608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f007 fe04 	bl	8008608 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a00:	2004      	movs	r0, #4
 8000a02:	f002 fe9d 	bl	8003740 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	4a28      	ldr	r2, [pc, #160]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2340      	movs	r3, #64	@ 0x40
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fec5 	bl	80037f4 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a70:	f000 fab2 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	233f      	movs	r3, #63	@ 0x3f
 8000a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2101      	movs	r1, #1
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fb05 	bl	80040a8 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aa4:	f000 fa98 	bl	8000fd8 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3770      	adds	r7, #112	@ 0x70
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58000400 	.word	0x58000400
 8000ab4:	58024800 	.word	0x58024800

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x403032CA;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	f002 f822 	bl	8002b3c <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 fa6b 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000b06:	f002 fd83 	bl	8003610 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 fa62 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000b18:	f002 fdc5 	bl	80036a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fa59 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000154 	.word	0x24000154
 8000b30:	40005400 	.word	0x40005400
 8000b34:	403032ca 	.word	0x403032ca

08000b38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b52:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <MX_RTC_Init+0xb4>)
 8000b54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b5e:	227f      	movs	r2, #127	@ 0x7f
 8000b60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b64:	22ff      	movs	r2, #255	@ 0xff
 8000b66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b80:	4819      	ldr	r0, [pc, #100]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000b82:	f005 fc49 	bl	8006418 <HAL_RTC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000b8c:	f000 fa24 	bl	8000fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 8000b90:	2314      	movs	r3, #20
 8000b92:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000bac:	f005 fcb6 	bl	800651c <HAL_RTC_SetTime>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000bb6:	f000 fa0f 	bl	8000fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000bc6:	2323      	movs	r3, #35	@ 0x23
 8000bc8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_RTC_Init+0xb0>)
 8000bd2:	f005 fd9d 	bl	8006710 <HAL_RTC_SetDate>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000bdc:	f000 f9fc 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	240001a8 	.word	0x240001a8
 8000bec:	58004000 	.word	0x58004000

08000bf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <MX_USART3_UART_Init+0x94>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c38:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c3a:	f005 ff0f 	bl	8006a5c <HAL_UART_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c44:	f000 f9c8 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c4c:	f007 fbde 	bl	800840c <HAL_UARTEx_SetTxFifoThreshold>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 f9bf 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f007 fc13 	bl	8008488 <HAL_UARTEx_SetRxFifoThreshold>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f000 f9b6 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_USART3_UART_Init+0x90>)
 8000c6e:	f007 fb94 	bl	800839a <HAL_UARTEx_DisableFifoMode>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 f9ae 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240001cc 	.word	0x240001cc
 8000c84:	40004800 	.word	0x40004800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca4:	4a20      	ldr	r2, [pc, #128]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_GPIO_Init+0xa0>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <MX_GPIO_Init+0xa4>)
 8000cfe:	f001 febb 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d02:	2304      	movs	r3, #4
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_GPIO_Init+0xa4>)
 8000d1a:	f001 fcfd 	bl	8002718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58022400 	.word	0x58022400

08000d30 <scd30_start_periodic_measurement>:

/* USER CODE BEGIN 4 */

uint16_t scd30_start_periodic_measurement(I2C_HandleTypeDef* hi2c, uint16_t ambient_pressure_mbar) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
    if (ambient_pressure_mbar &&
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00a      	beq.n	8000d58 <scd30_start_periodic_measurement+0x28>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 8000d42:	887b      	ldrh	r3, [r7, #2]
    if (ambient_pressure_mbar &&
 8000d44:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000d48:	d303      	bcc.n	8000d52 <scd30_start_periodic_measurement+0x22>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8000d50:	d902      	bls.n	8000d58 <scd30_start_periodic_measurement+0x28>
        /* out of allowable range */
        return STATUS_FAIL;
 8000d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d56:	e009      	b.n	8000d6c <scd30_start_periodic_measurement+0x3c>
    }

    return sensirion_i2c_write_cmd_with_args(hi2c,
 8000d58:	1cbb      	adds	r3, r7, #2
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	9200      	str	r2, [sp, #0]
 8000d5e:	2210      	movs	r2, #16
 8000d60:	2161      	movs	r1, #97	@ 0x61
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 faea 	bl	800133c <sensirion_i2c_write_cmd_with_args>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29b      	uxth	r3, r3
        SCD30_I2C_ADDRESS, SCD30_CMD_START_PERIODIC_MEASUREMENT,
        &ambient_pressure_mbar, SENSIRION_NUM_WORDS(ambient_pressure_mbar));
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <scd30_read_measurement>:
    return sensirion_i2c_write_cmd(hi2c, SCD30_I2C_ADDRESS,
                                   SCD30_CMD_STOP_PERIODIC_MEASUREMENT);
}

int16_t scd30_read_measurement(I2C_HandleTypeDef* hi2c, float* co2_ppm, float* temperature,
                               float* humidity) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t data[3][4];

    error =
        sensirion_i2c_write_cmd(hi2c, SCD30_I2C_ADDRESS, SCD30_CMD_READ_MEASUREMENT);
 8000d82:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d86:	2161      	movs	r1, #97	@ 0x61
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 fabc 	bl	8001306 <sensirion_i2c_write_cmd>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	83fb      	strh	r3, [r7, #30]
    if (error != NO_ERROR)
 8000d92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <scd30_read_measurement+0x2c>
        return error;
 8000d9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d9e:	e030      	b.n	8000e02 <scd30_read_measurement+0x8e>

    error = sensirion_i2c_read_words_as_bytes(hi2c, SCD30_I2C_ADDRESS, &data[0][0],
 8000da0:	f107 0210 	add.w	r2, r7, #16
 8000da4:	2306      	movs	r3, #6
 8000da6:	2161      	movs	r1, #97	@ 0x61
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 f9fe 	bl	80011aa <sensirion_i2c_read_words_as_bytes>
 8000dae:	4603      	mov	r3, r0
 8000db0:	83fb      	strh	r3, [r7, #30]
                                              SENSIRION_NUM_WORDS(data));
    if (error != NO_ERROR)
 8000db2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <scd30_read_measurement+0x4c>
        return error;
 8000dba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dbe:	e020      	b.n	8000e02 <scd30_read_measurement+0x8e>

    *co2_ppm = sensirion_bytes_to_float(data[0]);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f930 	bl	800102a <sensirion_bytes_to_float>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_bytes_to_float(data[1]);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	3304      	adds	r3, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f925 	bl	800102a <sensirion_bytes_to_float>
 8000de0:	eef0 7a40 	vmov.f32	s15, s0
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_bytes_to_float(data[2]);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	3308      	adds	r3, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f91a 	bl	800102a <sensirion_bytes_to_float>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	edc3 7a00 	vstr	s15, [r3]

    return NO_ERROR;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(I2C_HandleTypeDef* hi2c, uint16_t interval_sec) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af02      	add	r7, sp, #8
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
    int16_t error;

    if (interval_sec < 2 || interval_sec > 1800) {
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d903      	bls.n	8000e24 <scd30_set_measurement_interval+0x1a>
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000e22:	d902      	bls.n	8000e2a <scd30_set_measurement_interval+0x20>
        /* out of allowable range */
        return STATUS_FAIL;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	e010      	b.n	8000e4c <scd30_set_measurement_interval+0x42>
    }

    error = sensirion_i2c_write_cmd_with_args(hi2c,
 8000e2a:	1cbb      	adds	r3, r7, #2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8000e34:	2161      	movs	r1, #97	@ 0x61
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 fa80 	bl	800133c <sensirion_i2c_write_cmd_with_args>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	81fb      	strh	r3, [r7, #14]
        SCD30_I2C_ADDRESS, SCD30_CMD_SET_MEASUREMENT_INTERVAL, &interval_sec,
        SENSIRION_NUM_WORDS(interval_sec));
    sensirion_sleep_usec(SCD30_WRITE_DELAY_US);
 8000e40:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000e44:	f000 fb02 	bl	800144c <sensirion_sleep_usec>

    return error;
 8000e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <scd30_get_data_ready>:

int16_t scd30_get_data_ready(I2C_HandleTypeDef* hi2c, uint16_t* data_ready) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    return sensirion_i2c_delayed_read_cmd(hi2c,
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000e6a:	f240 2202 	movw	r2, #514	@ 0x202
 8000e6e:	2161      	movs	r1, #97	@ 0x61
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fa83 	bl	800137c <sensirion_i2c_delayed_read_cmd>
 8000e76:	4603      	mov	r3, r0
        SCD30_I2C_ADDRESS, SCD30_CMD_GET_DATA_READY, 3000, data_ready,
        SENSIRION_NUM_WORDS(*data_ready));
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <scd30_probe>:

uint8_t scd30_get_configured_address() {
    return SCD30_I2C_ADDRESS;
}

int16_t scd30_probe(I2C_HandleTypeDef* hi2c) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    uint16_t data_ready;

    /* try to read data-ready state */
    return scd30_get_data_ready(hi2c, &data_ready);
 8000e88:	f107 030e 	add.w	r3, r7, #14
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffe0 	bl	8000e54 <scd30_get_data_ready>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <display_values>:

void display_values(char* display_str, float temperature, float co2_ppm, float relative_humidity, uint8_t office_number, uint8_t occupancy)
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b09f      	sub	sp, #124	@ 0x7c
 8000ea4:	af0c      	add	r7, sp, #48	@ 0x30
 8000ea6:	6178      	str	r0, [r7, #20]
 8000ea8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eac:	edc7 0a03 	vstr	s1, [r7, #12]
 8000eb0:	ed87 1a02 	vstr	s2, [r7, #8]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	  int temperatureInt, temperatureFrac, humidityInt, humidityFrac;
	  float tmpFrac;

	  temperatureInt = temperature;
 8000ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec4:	ee17 3a90 	vmov	r3, s15
 8000ec8:	647b      	str	r3, [r7, #68]	@ 0x44
	  tmpFrac = temperature - temperatureInt;
 8000eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000edc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  temperatureFrac = trunc(tmpFrac * 10);
 8000ee0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000ee4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ef4:	f008 f808 	bl	8008f08 <trunc>
 8000ef8:	eeb0 7b40 	vmov.f64	d7, d0
 8000efc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f00:	ee17 3a90 	vmov	r3, s15
 8000f04:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  humidityInt = relative_humidity;
 8000f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	63bb      	str	r3, [r7, #56]	@ 0x38
	  tmpFrac = relative_humidity - humidityInt;
 8000f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f26:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  humidityFrac = trunc(tmpFrac * 100);
 8000f2a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000f2e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000fcc <display_values+0x12c>
 8000f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f3e:	f007 ffe3 	bl	8008f08 <trunc>
 8000f42:	eeb0 7b40 	vmov.f64	d7, d0
 8000f46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f4a:	ee17 3a90 	vmov	r3, s15
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34

	  RTC_DateTypeDef sdatestructureget;
	  RTC_TimeTypeDef stimestructureget;

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	481d      	ldr	r0, [pc, #116]	@ (8000fd0 <display_values+0x130>)
 8000f5a:	f005 fb7d 	bl	8006658 <HAL_RTC_GetTime>
	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000f5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	481a      	ldr	r0, [pc, #104]	@ (8000fd0 <display_values+0x130>)
 8000f68:	f005 fc5a 	bl	8006820 <HAL_RTC_GetDate>

	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
			  sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year, stimestructureget.Hours, stimestructureget.Minutes,
 8000f6c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
 8000f70:	461e      	mov	r6, r3
			  sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year, stimestructureget.Hours, stimestructureget.Minutes,
 8000f72:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
 8000f76:	4619      	mov	r1, r3
			  sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year, stimestructureget.Hours, stimestructureget.Minutes,
 8000f78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
 8000f7c:	4618      	mov	r0, r3
			  sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year, stimestructureget.Hours, stimestructureget.Minutes,
 8000f7e:	7f3b      	ldrb	r3, [r7, #28]
	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
 8000f80:	461c      	mov	r4, r3
			  sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year, stimestructureget.Hours, stimestructureget.Minutes,
 8000f82:	7f7b      	ldrb	r3, [r7, #29]
	  snprintf(display_str, DISPLAY_LENGTH,"\r\n%02d-%02d-%02d %02d:%02d \t %d.%01d \t %d \t %d.%02d \t %d   %d\r",
 8000f84:	461d      	mov	r5, r3
 8000f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8e:	edc7 7a00 	vstr	s15, [r7]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	920a      	str	r2, [sp, #40]	@ 0x28
 8000f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f9c:	9308      	str	r3, [sp, #32]
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fa0:	9307      	str	r3, [sp, #28]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	9306      	str	r3, [sp, #24]
 8000fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	9503      	str	r5, [sp, #12]
 8000fb0:	9402      	str	r4, [sp, #8]
 8000fb2:	9001      	str	r0, [sp, #4]
 8000fb4:	9100      	str	r1, [sp, #0]
 8000fb6:	4633      	mov	r3, r6
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <display_values+0x134>)
 8000fba:	2164      	movs	r1, #100	@ 0x64
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f007 faef 	bl	80085a0 <sniprintf>
			  temperatureInt, temperatureFrac, (int)co2_ppm, humidityInt, humidityFrac, (int)office_number, (int)occupancy);

}
 8000fc2:	bf00      	nop
 8000fc4:	374c      	adds	r7, #76	@ 0x4c
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000
 8000fd0:	240001a8 	.word	0x240001a8
 8000fd4:	08008f84 	.word	0x08008f84

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  //__disable_irq();
	  while (1)
	  {
		  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <Error_Handler+0x18>)
 8000fe0:	f001 fd63 	bl	8002aaa <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000fe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe8:	f000 fce8 	bl	80019bc <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8000fec:	bf00      	nop
 8000fee:	e7f5      	b.n	8000fdc <Error_Handler+0x4>
 8000ff0:	58022400 	.word	0x58022400

08000ff4 <sensirion_bytes_to_uint32_t>:
 * This module provides functionality that is common to all Sensirion drivers
 */

#include "scd30.h"

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061a      	lsls	r2, r3, #24
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3302      	adds	r3, #2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8001014:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	3203      	adds	r2, #3
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	4313      	orrs	r3, r2
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <sensirion_bytes_to_float>:

float sensirion_bytes_to_float(const uint8_t* bytes) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffde 	bl	8000ff4 <sensirion_bytes_to_uint32_t>
 8001038:	4603      	mov	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	ee07 3a90 	vmov	s15, r3
}
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <sensirion_common_generate_crc>:

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800105c:	2300      	movs	r3, #0
 800105e:	81fb      	strh	r3, [r7, #14]
 8001060:	e021      	b.n	80010a6 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	4053      	eors	r3, r2
 800106e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001070:	2308      	movs	r3, #8
 8001072:	733b      	strb	r3, [r7, #12]
 8001074:	e011      	b.n	800109a <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8001076:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da07      	bge.n	800108e <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001088:	b25b      	sxtb	r3, r3
 800108a:	737b      	strb	r3, [r7, #13]
 800108c:	e002      	b.n	8001094 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	3b01      	subs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ea      	bne.n	8001076 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80010a0:	89fb      	ldrh	r3, [r7, #14]
 80010a2:	3301      	adds	r3, #1
 80010a4:	81fb      	strh	r3, [r7, #14]
 80010a6:	89fa      	ldrh	r2, [r7, #14]
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3d9      	bcc.n	8001062 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80010ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4619      	mov	r1, r3
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffbb 	bl	800104c <sensirion_common_generate_crc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	787b      	ldrb	r3, [r7, #1]
 80010dc:	4293      	cmp	r3, r2
 80010de:	d002      	beq.n	80010e6 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	e000      	b.n	80010e8 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(hi2c, 0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	460b      	mov	r3, r1
 80010fe:	817b      	strh	r3, [r7, #10]
 8001100:	4613      	mov	r3, r2
 8001102:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	b29a      	uxth	r2, r3
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	1c59      	adds	r1, r3, #1
 8001112:	82b9      	strh	r1, [r7, #20]
 8001114:	4619      	mov	r1, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	440b      	add	r3, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800111e:	8abb      	ldrh	r3, [r7, #20]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	82ba      	strh	r2, [r7, #20]
 8001124:	461a      	mov	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	897a      	ldrh	r2, [r7, #10]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
 8001134:	e030      	b.n	8001198 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b29a      	uxth	r2, r3
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	82b9      	strh	r1, [r7, #20]
 800114a:	4619      	mov	r1, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	440b      	add	r3, r1
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	1c59      	adds	r1, r3, #1
 8001162:	82b9      	strh	r1, [r7, #20]
 8001164:	4619      	mov	r1, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	440b      	add	r3, r1
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 800116e:	8abb      	ldrh	r3, [r7, #20]
 8001170:	3b02      	subs	r3, #2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff67 	bl	800104c <sensirion_common_generate_crc>
 800117e:	4603      	mov	r3, r0
 8001180:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001182:	8abb      	ldrh	r3, [r7, #20]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	82ba      	strh	r2, [r7, #20]
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	7cfa      	ldrb	r2, [r7, #19]
 8001190:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	3301      	adds	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
 8001198:	7dfa      	ldrb	r2, [r7, #23]
 800119a:	7a7b      	ldrb	r3, [r7, #9]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3ca      	bcc.n	8001136 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 80011a0:	8abb      	ldrh	r3, [r7, #20]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b098      	sub	sp, #96	@ 0x60
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	461a      	mov	r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	72fb      	strb	r3, [r7, #11]
 80011ba:	4613      	mov	r3, r2
 80011bc:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 80011be:	893b      	ldrh	r3, [r7, #8]
 80011c0:	461a      	mov	r2, r3
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	657b      	str	r3, [r7, #84]	@ 0x54

    ret = sensirion_i2c_read(hi2c, address, buf8, size);
 80011d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80011d4:	7af9      	ldrb	r1, [r7, #11]
 80011d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f91b 	bl	8001414 <sensirion_i2c_read>
 80011de:	4603      	mov	r3, r0
 80011e0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    if (ret != NO_ERROR)
 80011e4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <sensirion_i2c_read_words_as_bytes+0x48>
        return ret;
 80011ec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80011f0:	e047      	b.n	8001282 <sensirion_i2c_read_words_as_bytes+0xd8>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80011fe:	e039      	b.n	8001274 <sensirion_i2c_read_words_as_bytes+0xca>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001200:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001206:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001208:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800120c:	3302      	adds	r3, #2
 800120e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001210:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	2102      	movs	r1, #2
 8001218:	f7ff ff50 	bl	80010bc <sensirion_common_check_crc>
 800121c:	4603      	mov	r3, r0
 800121e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        if (ret != NO_ERROR)
 8001222:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <sensirion_i2c_read_words_as_bytes+0x86>
            return ret;
 800122a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800122e:	e028      	b.n	8001282 <sensirion_i2c_read_words_as_bytes+0xd8>

        data[j++] = buf8[i];
 8001230:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001236:	441a      	add	r2, r3
 8001238:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	f8a7 105c 	strh.w	r1, [r7, #92]	@ 0x5c
 8001242:	4619      	mov	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	440b      	add	r3, r1
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 800124c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001250:	3301      	adds	r3, #1
 8001252:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001254:	441a      	add	r2, r3
 8001256:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	f8a7 105c 	strh.w	r1, [r7, #92]	@ 0x5c
 8001260:	4619      	mov	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	440b      	add	r3, r1
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800126a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800126e:	3303      	adds	r3, #3
 8001270:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8001274:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001278:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800127c:	429a      	cmp	r2, r3
 800127e:	d3bf      	bcc.n	8001200 <sensirion_i2c_read_words_as_bytes+0x56>
    }

    return NO_ERROR;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3760      	adds	r7, #96	@ 0x60
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	461a      	mov	r2, r3
 8001296:	460b      	mov	r3, r1
 8001298:	72fb      	strb	r3, [r7, #11]
 800129a:	4613      	mov	r3, r2
 800129c:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(hi2c, address, (uint8_t*)data_words,
 800129e:	893b      	ldrh	r3, [r7, #8]
 80012a0:	7af9      	ldrb	r1, [r7, #11]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff ff80 	bl	80011aa <sensirion_i2c_read_words_as_bytes>
 80012aa:	4603      	mov	r3, r0
 80012ac:	82bb      	strh	r3, [r7, #20]
                                            num_words);
    if (ret != NO_ERROR)
 80012ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <sensirion_i2c_read_words+0x32>
        return ret;
 80012b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ba:	e020      	b.n	80012fe <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i) {
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
 80012c0:	e017      	b.n	80012f2 <sensirion_i2c_read_words+0x68>
        word_bytes = (uint8_t*)&data_words[i];
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b219      	sxth	r1, r3
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	b28a      	uxth	r2, r1
 80012ea:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	3301      	adds	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	893a      	ldrh	r2, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8e2      	bhi.n	80012c2 <sensirion_i2c_read_words+0x38>
    }

    return NO_ERROR;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t command) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
 8001312:	4613      	mov	r3, r2
 8001314:	803b      	strh	r3, [r7, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8001316:	8839      	ldrh	r1, [r7, #0]
 8001318:	f107 000c 	add.w	r0, r7, #12
 800131c:	2300      	movs	r3, #0
 800131e:	2200      	movs	r2, #0
 8001320:	f7ff fee6 	bl	80010f0 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(hi2c, address, buf, SENSIRION_COMMAND_SIZE);
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	78f9      	ldrb	r1, [r7, #3]
 800132a:	2302      	movs	r3, #2
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f856 	bl	80013de <sensirion_i2c_write>
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	@ 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	72fb      	strb	r3, [r7, #11]
 800134a:	4613      	mov	r3, r2
 800134c:	813b      	strh	r3, [r7, #8]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 800134e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001352:	b2db      	uxtb	r3, r3
 8001354:	8939      	ldrh	r1, [r7, #8]
 8001356:	f107 0014 	add.w	r0, r7, #20
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	f7ff fec8 	bl	80010f0 <sensirion_fill_cmd_send_buf>
 8001360:	4603      	mov	r3, r0
 8001362:	86fb      	strh	r3, [r7, #54]	@ 0x36
    return sensirion_i2c_write(hi2c, address, buf, buf_size);
 8001364:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001366:	f107 0214 	add.w	r2, r7, #20
 800136a:	7af9      	ldrb	r1, [r7, #11]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f836 	bl	80013de <sensirion_i2c_write>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	72fb      	strb	r3, [r7, #11]
 800138a:	4613      	mov	r3, r2
 800138c:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 800138e:	8939      	ldrh	r1, [r7, #8]
 8001390:	f107 0014 	add.w	r0, r7, #20
 8001394:	2300      	movs	r3, #0
 8001396:	2200      	movs	r2, #0
 8001398:	f7ff feaa 	bl	80010f0 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(hi2c, address, buf, SENSIRION_COMMAND_SIZE);
 800139c:	f107 0214 	add.w	r2, r7, #20
 80013a0:	7af9      	ldrb	r1, [r7, #11]
 80013a2:	2302      	movs	r3, #2
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f81a 	bl	80013de <sensirion_i2c_write>
 80013aa:	4603      	mov	r3, r0
 80013ac:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 80013ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 80013b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ba:	e00c      	b.n	80013d6 <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f842 	bl	800144c <sensirion_sleep_usec>

    return sensirion_i2c_read_words(hi2c, address, data_words, num_words);
 80013c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	6a3a      	ldr	r2, [r7, #32]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff ff5b 	bl	800128a <sensirion_i2c_read_words>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <sensirion_i2c_write>:
    return sensirion_i2c_delayed_read_cmd(hi2c, address, cmd, 0, data_words,
                                          num_words);
}

int8_t sensirion_i2c_write(I2C_HandleTypeDef* hi2c, uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af02      	add	r7, sp, #8
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	460b      	mov	r3, r1
 80013ec:	72fb      	strb	r3, [r7, #11]
 80013ee:	4613      	mov	r3, r2
 80013f0:	813b      	strh	r3, [r7, #8]
    return (int8_t)HAL_I2C_Master_Transmit(hi2c, (uint16_t)(address << 1),
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b299      	uxth	r1, r3
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	2264      	movs	r2, #100	@ 0x64
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f001 fc36 	bl	8002c74 <HAL_I2C_Master_Transmit>
 8001408:	4603      	mov	r3, r0
 800140a:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <sensirion_i2c_read>:

int8_t sensirion_i2c_read(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t* data, uint16_t count) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	72fb      	strb	r3, [r7, #11]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
    return (int8_t)HAL_I2C_Master_Receive(hi2c, (uint16_t)(address << 1),
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	b29b      	uxth	r3, r3
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b299      	uxth	r1, r3
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	2264      	movs	r2, #100	@ 0x64
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f001 fd33 	bl	8002ea4 <HAL_I2C_Master_Receive>
 800143e:	4603      	mov	r3, r0
 8001440:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <sensirion_sleep_usec>:

void sensirion_sleep_usec(uint32_t useconds) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <sensirion_sleep_usec+0x54>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <sensirion_sleep_usec+0x54>)
 8001464:	fba3 1302 	umull	r1, r3, r3, r2
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <sensirion_sleep_usec+0x32>
        msec++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 800147e:	f000 fac1 	bl	8001a04 <HAL_GetHalVersion>
 8001482:	4603      	mov	r3, r0
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <sensirion_sleep_usec+0x58>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d202      	bcs.n	8001490 <sensirion_sleep_usec+0x44>
        msec++;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fa93 	bl	80019bc <HAL_Delay>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	10624dd3 	.word	0x10624dd3
 80014a4:	01010100 	.word	0x01010100

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_MspInit+0x30>)
 80014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014b4:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x30>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	58024400 	.word	0x58024400

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ba      	sub	sp, #232	@ 0xe8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	22c0      	movs	r2, #192	@ 0xc0
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 f883 	bl	8008608 <memset>
  if(hi2c->Instance==I2C1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2a      	ldr	r2, [pc, #168]	@ (80015b0 <HAL_I2C_MspInit+0xd4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d14d      	bne.n	80015a8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800150c:	f04f 0208 	mov.w	r2, #8
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f94c 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800152e:	f7ff fd53 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001568:	2304      	movs	r3, #4
 800156a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001572:	4619      	mov	r1, r3
 8001574:	4810      	ldr	r0, [pc, #64]	@ (80015b8 <HAL_I2C_MspInit+0xdc>)
 8001576:	f001 f8cf 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 800157c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001580:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001586:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_I2C_MspInit+0xd8>)
 800158c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	201f      	movs	r0, #31
 800159e:	f000 fb22 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a2:	201f      	movs	r0, #31
 80015a4:	f000 fb39 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	37e8      	adds	r7, #232	@ 0xe8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58020400 	.word	0x58020400

080015bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0b2      	sub	sp, #200	@ 0xc8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	22c0      	movs	r2, #192	@ 0xc0
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 f81b 	bl	8008608 <memset>
  if(hrtc->Instance==RTC)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_RTC_MspInit+0x5c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d119      	bne.n	8001610 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f8e3 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001600:	f7ff fcea 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_RTC_MspInit+0x60>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_RTC_MspInit+0x60>)
 800160a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	37c8      	adds	r7, #200	@ 0xc8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	58004000 	.word	0x58004000
 800161c:	58024400 	.word	0x58024400

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0bc      	sub	sp, #240	@ 0xf0
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	22c0      	movs	r2, #192	@ 0xc0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f006 ffe1 	bl	8008608 <memset>
  if(huart->Instance==USART3)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a3d      	ldr	r2, [pc, #244]	@ (8001740 <HAL_UART_MspInit+0x120>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d173      	bne.n	8001738 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001650:	f04f 0202 	mov.w	r2, #2
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	4618      	mov	r0, r3
 8001668:	f003 f8aa 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001672:	f7ff fcb1 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001676:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <HAL_UART_MspInit+0x124>)
 8001678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800167c:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <HAL_UART_MspInit+0x124>)
 800167e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001682:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_UART_MspInit+0x124>)
 8001688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800168c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_UART_MspInit+0x124>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a2a      	ldr	r2, [pc, #168]	@ (8001744 <HAL_UART_MspInit+0x124>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_UART_MspInit+0x124>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_UART_MspInit+0x124>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a22      	ldr	r2, [pc, #136]	@ (8001744 <HAL_UART_MspInit+0x124>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_UART_MspInit+0x124>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ea:	2307      	movs	r3, #7
 80016ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016f4:	4619      	mov	r1, r3
 80016f6:	4814      	ldr	r0, [pc, #80]	@ (8001748 <HAL_UART_MspInit+0x128>)
 80016f8:	f001 f80e 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001700:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001716:	2307      	movs	r3, #7
 8001718:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001720:	4619      	mov	r1, r3
 8001722:	480a      	ldr	r0, [pc, #40]	@ (800174c <HAL_UART_MspInit+0x12c>)
 8001724:	f000 fff8 	bl	8002718 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2027      	movs	r0, #39	@ 0x27
 800172e:	f000 fa5a 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001732:	2027      	movs	r0, #39	@ 0x27
 8001734:	f000 fa71 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	37f0      	adds	r7, #240	@ 0xf0
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004800 	.word	0x40004800
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020400 	.word	0x58020400

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a6:	f000 f8e9 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <I2C1_EV_IRQHandler+0x10>)
 80017b6:	f001 fc6b 	bl	8003090 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24000154 	.word	0x24000154

080017c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <USART3_IRQHandler+0x10>)
 80017ca:	f005 fa25 	bl	8006c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240001cc 	.word	0x240001cc

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f006 ff06 	bl	8008618 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24080000 	.word	0x24080000
 8001838:	00000800 	.word	0x00000800
 800183c:	240002c8 	.word	0x240002c8
 8001840:	20000000 	.word	0x20000000

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800187c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001848:	f7fe ff12 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	@ (8001884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	@ (8001890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001872:	f006 fed7 	bl	8008624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7fe ff91 	bl	800079c <main>
  bx  lr
 800187a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001880:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001884:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8001888:	08009040 	.word	0x08009040
  ldr r2, =_sbss
 800188c:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001890:	24000418 	.word	0x24000418

08001894 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC3_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189e:	2003      	movs	r0, #3
 80018a0:	f000 f996 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018a4:	f002 fdb6 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_Init+0x68>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	4913      	ldr	r1, [pc, #76]	@ (8001904 <HAL_Init+0x6c>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <HAL_Init+0x68>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <HAL_Init+0x6c>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <HAL_Init+0x70>)
 80018da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018dc:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <HAL_Init+0x74>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f814 	bl	8001910 <HAL_InitTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e002      	b.n	80018f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018f2:	f7ff fdd9 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	58024400 	.word	0x58024400
 8001904:	08008fc4 	.word	0x08008fc4
 8001908:	24000004 	.word	0x24000004
 800190c:	24000000 	.word	0x24000000

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_InitTick+0x60>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e021      	b.n	8001968 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_InitTick+0x64>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_InitTick+0x60>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f97b 	bl	8001c36 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f945 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <HAL_InitTick+0x68>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	240000e4 	.word	0x240000e4
 8001974:	24000000 	.word	0x24000000
 8001978:	240000e0 	.word	0x240000e0

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	240000e4 	.word	0x240000e4
 80019a0:	240002cc 	.word	0x240002cc

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	240002cc 	.word	0x240002cc

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	240000e4 	.word	0x240000e4

08001a04 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 8001a08:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <HAL_GetHalVersion+0x10>)
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	010b0300 	.word	0x010b0300

08001a18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetREVID+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0c1b      	lsrs	r3, r3, #16
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	5c001000 	.word	0x5c001000

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff40 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff33 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa4 	bl	8001b8c <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff fea4 	bl	80019a4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e2dc      	b.n	8002222 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	@ 0x80
 8001c78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e2cd      	b.n	8002222 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a76      	ldr	r2, [pc, #472]	@ (8001e64 <HAL_DMA_Abort+0x214>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04a      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a74      	ldr	r2, [pc, #464]	@ (8001e68 <HAL_DMA_Abort+0x218>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d045      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a73      	ldr	r2, [pc, #460]	@ (8001e6c <HAL_DMA_Abort+0x21c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d040      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a71      	ldr	r2, [pc, #452]	@ (8001e70 <HAL_DMA_Abort+0x220>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d03b      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a70      	ldr	r2, [pc, #448]	@ (8001e74 <HAL_DMA_Abort+0x224>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d036      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e78 <HAL_DMA_Abort+0x228>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8001e7c <HAL_DMA_Abort+0x22c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d02c      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <HAL_DMA_Abort+0x230>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d027      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6a      	ldr	r2, [pc, #424]	@ (8001e84 <HAL_DMA_Abort+0x234>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	@ (8001e88 <HAL_DMA_Abort+0x238>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a67      	ldr	r2, [pc, #412]	@ (8001e8c <HAL_DMA_Abort+0x23c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	@ (8001e90 <HAL_DMA_Abort+0x240>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a64      	ldr	r2, [pc, #400]	@ (8001e94 <HAL_DMA_Abort+0x244>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a62      	ldr	r2, [pc, #392]	@ (8001e98 <HAL_DMA_Abort+0x248>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a61      	ldr	r2, [pc, #388]	@ (8001e9c <HAL_DMA_Abort+0x24c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort+0xd6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea0 <HAL_DMA_Abort+0x250>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Abort+0xda>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_DMA_Abort+0xdc>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 021e 	bic.w	r2, r2, #30
 8001d3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e00a      	b.n	8001d6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020e 	bic.w	r2, r2, #14
 8001d66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3c      	ldr	r2, [pc, #240]	@ (8001e64 <HAL_DMA_Abort+0x214>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d072      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e68 <HAL_DMA_Abort+0x218>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d06d      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a39      	ldr	r2, [pc, #228]	@ (8001e6c <HAL_DMA_Abort+0x21c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d068      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a37      	ldr	r2, [pc, #220]	@ (8001e70 <HAL_DMA_Abort+0x220>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d063      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a36      	ldr	r2, [pc, #216]	@ (8001e74 <HAL_DMA_Abort+0x224>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a34      	ldr	r2, [pc, #208]	@ (8001e78 <HAL_DMA_Abort+0x228>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d059      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a33      	ldr	r2, [pc, #204]	@ (8001e7c <HAL_DMA_Abort+0x22c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d054      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a31      	ldr	r2, [pc, #196]	@ (8001e80 <HAL_DMA_Abort+0x230>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d04f      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a30      	ldr	r2, [pc, #192]	@ (8001e84 <HAL_DMA_Abort+0x234>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04a      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e88 <HAL_DMA_Abort+0x238>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d045      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e8c <HAL_DMA_Abort+0x23c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d040      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e90 <HAL_DMA_Abort+0x240>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d03b      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <HAL_DMA_Abort+0x244>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d036      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <HAL_DMA_Abort+0x248>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a27      	ldr	r2, [pc, #156]	@ (8001e9c <HAL_DMA_Abort+0x24c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d02c      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	@ (8001ea0 <HAL_DMA_Abort+0x250>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d027      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <HAL_DMA_Abort+0x254>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <HAL_DMA_Abort+0x258>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	@ (8001eac <HAL_DMA_Abort+0x25c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_DMA_Abort+0x260>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <HAL_DMA_Abort+0x264>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <HAL_DMA_Abort+0x268>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <HAL_DMA_Abort+0x26c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort+0x20e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_DMA_Abort+0x270>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d132      	bne.n	8001ec4 <HAL_DMA_Abort+0x274>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e031      	b.n	8001ec6 <HAL_DMA_Abort+0x276>
 8001e62:	bf00      	nop
 8001e64:	40020010 	.word	0x40020010
 8001e68:	40020028 	.word	0x40020028
 8001e6c:	40020040 	.word	0x40020040
 8001e70:	40020058 	.word	0x40020058
 8001e74:	40020070 	.word	0x40020070
 8001e78:	40020088 	.word	0x40020088
 8001e7c:	400200a0 	.word	0x400200a0
 8001e80:	400200b8 	.word	0x400200b8
 8001e84:	40020410 	.word	0x40020410
 8001e88:	40020428 	.word	0x40020428
 8001e8c:	40020440 	.word	0x40020440
 8001e90:	40020458 	.word	0x40020458
 8001e94:	40020470 	.word	0x40020470
 8001e98:	40020488 	.word	0x40020488
 8001e9c:	400204a0 	.word	0x400204a0
 8001ea0:	400204b8 	.word	0x400204b8
 8001ea4:	58025408 	.word	0x58025408
 8001ea8:	5802541c 	.word	0x5802541c
 8001eac:	58025430 	.word	0x58025430
 8001eb0:	58025444 	.word	0x58025444
 8001eb4:	58025458 	.word	0x58025458
 8001eb8:	5802546c 	.word	0x5802546c
 8001ebc:	58025480 	.word	0x58025480
 8001ec0:	58025494 	.word	0x58025494
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6d      	ldr	r2, [pc, #436]	@ (8002094 <HAL_DMA_Abort+0x444>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04a      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8002098 <HAL_DMA_Abort+0x448>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d045      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800209c <HAL_DMA_Abort+0x44c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d040      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a68      	ldr	r2, [pc, #416]	@ (80020a0 <HAL_DMA_Abort+0x450>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d03b      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a67      	ldr	r2, [pc, #412]	@ (80020a4 <HAL_DMA_Abort+0x454>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d036      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_DMA_Abort+0x458>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a64      	ldr	r2, [pc, #400]	@ (80020ac <HAL_DMA_Abort+0x45c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d02c      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a62      	ldr	r2, [pc, #392]	@ (80020b0 <HAL_DMA_Abort+0x460>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d027      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a61      	ldr	r2, [pc, #388]	@ (80020b4 <HAL_DMA_Abort+0x464>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5f      	ldr	r2, [pc, #380]	@ (80020b8 <HAL_DMA_Abort+0x468>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5e      	ldr	r2, [pc, #376]	@ (80020bc <HAL_DMA_Abort+0x46c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d018      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80020c0 <HAL_DMA_Abort+0x470>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5b      	ldr	r2, [pc, #364]	@ (80020c4 <HAL_DMA_Abort+0x474>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a59      	ldr	r2, [pc, #356]	@ (80020c8 <HAL_DMA_Abort+0x478>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a58      	ldr	r2, [pc, #352]	@ (80020cc <HAL_DMA_Abort+0x47c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_Abort+0x32a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a56      	ldr	r2, [pc, #344]	@ (80020d0 <HAL_DMA_Abort+0x480>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <HAL_DMA_Abort+0x33c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e007      	b.n	8001f9c <HAL_DMA_Abort+0x34c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f9c:	e013      	b.n	8001fc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9e:	f7ff fd01 	bl	80019a4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d90c      	bls.n	8001fc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e12d      	b.n	8002222 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1e5      	bne.n	8001f9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002094 <HAL_DMA_Abort+0x444>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d04a      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <HAL_DMA_Abort+0x448>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d045      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2c      	ldr	r2, [pc, #176]	@ (800209c <HAL_DMA_Abort+0x44c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d040      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80020a0 <HAL_DMA_Abort+0x450>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d03b      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <HAL_DMA_Abort+0x454>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d036      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a27      	ldr	r2, [pc, #156]	@ (80020a8 <HAL_DMA_Abort+0x458>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d031      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a26      	ldr	r2, [pc, #152]	@ (80020ac <HAL_DMA_Abort+0x45c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d02c      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <HAL_DMA_Abort+0x460>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d027      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <HAL_DMA_Abort+0x464>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a21      	ldr	r2, [pc, #132]	@ (80020b8 <HAL_DMA_Abort+0x468>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a20      	ldr	r2, [pc, #128]	@ (80020bc <HAL_DMA_Abort+0x46c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <HAL_DMA_Abort+0x470>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1d      	ldr	r2, [pc, #116]	@ (80020c4 <HAL_DMA_Abort+0x474>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_DMA_Abort+0x478>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1a      	ldr	r2, [pc, #104]	@ (80020cc <HAL_DMA_Abort+0x47c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_DMA_Abort+0x422>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_DMA_Abort+0x480>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Abort+0x426>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_DMA_Abort+0x428>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02b      	beq.n	80020d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	223f      	movs	r2, #63	@ 0x3f
 800208c:	409a      	lsls	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	e02a      	b.n	80020ea <HAL_DMA_Abort+0x49a>
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2201      	movs	r2, #1
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <HAL_DMA_Abort+0x5dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d072      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002230 <HAL_DMA_Abort+0x5e0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d06d      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4c      	ldr	r2, [pc, #304]	@ (8002234 <HAL_DMA_Abort+0x5e4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d068      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_DMA_Abort+0x5e8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d063      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a49      	ldr	r2, [pc, #292]	@ (800223c <HAL_DMA_Abort+0x5ec>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d05e      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_DMA_Abort+0x5f0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d059      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a46      	ldr	r2, [pc, #280]	@ (8002244 <HAL_DMA_Abort+0x5f4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d054      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a44      	ldr	r2, [pc, #272]	@ (8002248 <HAL_DMA_Abort+0x5f8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d04f      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a43      	ldr	r2, [pc, #268]	@ (800224c <HAL_DMA_Abort+0x5fc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04a      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a41      	ldr	r2, [pc, #260]	@ (8002250 <HAL_DMA_Abort+0x600>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d045      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a40      	ldr	r2, [pc, #256]	@ (8002254 <HAL_DMA_Abort+0x604>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d040      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <HAL_DMA_Abort+0x608>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d03b      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <HAL_DMA_Abort+0x60c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d036      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a3b      	ldr	r2, [pc, #236]	@ (8002260 <HAL_DMA_Abort+0x610>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3a      	ldr	r2, [pc, #232]	@ (8002264 <HAL_DMA_Abort+0x614>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02c      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a38      	ldr	r2, [pc, #224]	@ (8002268 <HAL_DMA_Abort+0x618>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d027      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a37      	ldr	r2, [pc, #220]	@ (800226c <HAL_DMA_Abort+0x61c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a35      	ldr	r2, [pc, #212]	@ (8002270 <HAL_DMA_Abort+0x620>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01d      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a34      	ldr	r2, [pc, #208]	@ (8002274 <HAL_DMA_Abort+0x624>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d018      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_DMA_Abort+0x628>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a31      	ldr	r2, [pc, #196]	@ (800227c <HAL_DMA_Abort+0x62c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002280 <HAL_DMA_Abort+0x630>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002284 <HAL_DMA_Abort+0x634>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_DMA_Abort+0x58a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002288 <HAL_DMA_Abort+0x638>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Abort+0x58e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_Abort+0x590>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002204:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800220e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
 800226c:	58025408 	.word	0x58025408
 8002270:	5802541c 	.word	0x5802541c
 8002274:	58025430 	.word	0x58025430
 8002278:	58025444 	.word	0x58025444
 800227c:	58025458 	.word	0x58025458
 8002280:	5802546c 	.word	0x5802546c
 8002284:	58025480 	.word	0x58025480
 8002288:	58025494 	.word	0x58025494

0800228c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e237      	b.n	800270e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e22c      	b.n	800270e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5c      	ldr	r2, [pc, #368]	@ (800242c <HAL_DMA_Abort_IT+0x1a0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d04a      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002430 <HAL_DMA_Abort_IT+0x1a4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d045      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_DMA_Abort_IT+0x1a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d040      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a58      	ldr	r2, [pc, #352]	@ (8002438 <HAL_DMA_Abort_IT+0x1ac>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d03b      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a56      	ldr	r2, [pc, #344]	@ (800243c <HAL_DMA_Abort_IT+0x1b0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d036      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a55      	ldr	r2, [pc, #340]	@ (8002440 <HAL_DMA_Abort_IT+0x1b4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a53      	ldr	r2, [pc, #332]	@ (8002444 <HAL_DMA_Abort_IT+0x1b8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02c      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_DMA_Abort_IT+0x1bc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d027      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a50      	ldr	r2, [pc, #320]	@ (800244c <HAL_DMA_Abort_IT+0x1c0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d022      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4f      	ldr	r2, [pc, #316]	@ (8002450 <HAL_DMA_Abort_IT+0x1c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d01d      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <HAL_DMA_Abort_IT+0x1c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d018      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_DMA_Abort_IT+0x1cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4a      	ldr	r2, [pc, #296]	@ (800245c <HAL_DMA_Abort_IT+0x1d0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_DMA_Abort_IT+0x1d4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <HAL_DMA_Abort_IT+0x1d8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <HAL_DMA_Abort_IT+0x1dc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Abort_IT+0xcc>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_DMA_Abort_IT+0xce>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8086 	beq.w	800246c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2f      	ldr	r2, [pc, #188]	@ (800242c <HAL_DMA_Abort_IT+0x1a0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2e      	ldr	r2, [pc, #184]	@ (8002430 <HAL_DMA_Abort_IT+0x1a4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d045      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2c      	ldr	r2, [pc, #176]	@ (8002434 <HAL_DMA_Abort_IT+0x1a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d040      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2b      	ldr	r2, [pc, #172]	@ (8002438 <HAL_DMA_Abort_IT+0x1ac>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d03b      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a29      	ldr	r2, [pc, #164]	@ (800243c <HAL_DMA_Abort_IT+0x1b0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <HAL_DMA_Abort_IT+0x1b4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a26      	ldr	r2, [pc, #152]	@ (8002444 <HAL_DMA_Abort_IT+0x1b8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a25      	ldr	r2, [pc, #148]	@ (8002448 <HAL_DMA_Abort_IT+0x1bc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a23      	ldr	r2, [pc, #140]	@ (800244c <HAL_DMA_Abort_IT+0x1c0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a22      	ldr	r2, [pc, #136]	@ (8002450 <HAL_DMA_Abort_IT+0x1c4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <HAL_DMA_Abort_IT+0x1c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <HAL_DMA_Abort_IT+0x1cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <HAL_DMA_Abort_IT+0x1d0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002460 <HAL_DMA_Abort_IT+0x1d4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <HAL_DMA_Abort_IT+0x1d8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Abort_IT+0x17c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_DMA_Abort_IT+0x1dc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d108      	bne.n	800241a <HAL_DMA_Abort_IT+0x18e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e178      	b.n	800270c <HAL_DMA_Abort_IT+0x480>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e16f      	b.n	800270c <HAL_DMA_Abort_IT+0x480>
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020e 	bic.w	r2, r2, #14
 800247a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6c      	ldr	r2, [pc, #432]	@ (8002634 <HAL_DMA_Abort_IT+0x3a8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d04a      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6b      	ldr	r2, [pc, #428]	@ (8002638 <HAL_DMA_Abort_IT+0x3ac>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d045      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a69      	ldr	r2, [pc, #420]	@ (800263c <HAL_DMA_Abort_IT+0x3b0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d040      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a68      	ldr	r2, [pc, #416]	@ (8002640 <HAL_DMA_Abort_IT+0x3b4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d03b      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a66      	ldr	r2, [pc, #408]	@ (8002644 <HAL_DMA_Abort_IT+0x3b8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d036      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a65      	ldr	r2, [pc, #404]	@ (8002648 <HAL_DMA_Abort_IT+0x3bc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d031      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a63      	ldr	r2, [pc, #396]	@ (800264c <HAL_DMA_Abort_IT+0x3c0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02c      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a62      	ldr	r2, [pc, #392]	@ (8002650 <HAL_DMA_Abort_IT+0x3c4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d027      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a60      	ldr	r2, [pc, #384]	@ (8002654 <HAL_DMA_Abort_IT+0x3c8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d022      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5f      	ldr	r2, [pc, #380]	@ (8002658 <HAL_DMA_Abort_IT+0x3cc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01d      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5d      	ldr	r2, [pc, #372]	@ (800265c <HAL_DMA_Abort_IT+0x3d0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d018      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002660 <HAL_DMA_Abort_IT+0x3d4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_DMA_Abort_IT+0x3d8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00e      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a59      	ldr	r2, [pc, #356]	@ (8002668 <HAL_DMA_Abort_IT+0x3dc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a57      	ldr	r2, [pc, #348]	@ (800266c <HAL_DMA_Abort_IT+0x3e0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_DMA_Abort_IT+0x290>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a56      	ldr	r2, [pc, #344]	@ (8002670 <HAL_DMA_Abort_IT+0x3e4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d108      	bne.n	800252e <HAL_DMA_Abort_IT+0x2a2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e007      	b.n	800253e <HAL_DMA_Abort_IT+0x2b2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3c      	ldr	r2, [pc, #240]	@ (8002634 <HAL_DMA_Abort_IT+0x3a8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d072      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3a      	ldr	r2, [pc, #232]	@ (8002638 <HAL_DMA_Abort_IT+0x3ac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d06d      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a39      	ldr	r2, [pc, #228]	@ (800263c <HAL_DMA_Abort_IT+0x3b0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d068      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a37      	ldr	r2, [pc, #220]	@ (8002640 <HAL_DMA_Abort_IT+0x3b4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d063      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <HAL_DMA_Abort_IT+0x3b8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a34      	ldr	r2, [pc, #208]	@ (8002648 <HAL_DMA_Abort_IT+0x3bc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d059      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a33      	ldr	r2, [pc, #204]	@ (800264c <HAL_DMA_Abort_IT+0x3c0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d054      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a31      	ldr	r2, [pc, #196]	@ (8002650 <HAL_DMA_Abort_IT+0x3c4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d04f      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a30      	ldr	r2, [pc, #192]	@ (8002654 <HAL_DMA_Abort_IT+0x3c8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d04a      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2e      	ldr	r2, [pc, #184]	@ (8002658 <HAL_DMA_Abort_IT+0x3cc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d045      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	@ (800265c <HAL_DMA_Abort_IT+0x3d0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d040      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002660 <HAL_DMA_Abort_IT+0x3d4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d03b      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002664 <HAL_DMA_Abort_IT+0x3d8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d036      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a28      	ldr	r2, [pc, #160]	@ (8002668 <HAL_DMA_Abort_IT+0x3dc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_DMA_Abort_IT+0x3e0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d02c      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a25      	ldr	r2, [pc, #148]	@ (8002670 <HAL_DMA_Abort_IT+0x3e4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d027      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a24      	ldr	r2, [pc, #144]	@ (8002674 <HAL_DMA_Abort_IT+0x3e8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <HAL_DMA_Abort_IT+0x3ec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01d      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a21      	ldr	r2, [pc, #132]	@ (800267c <HAL_DMA_Abort_IT+0x3f0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d018      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <HAL_DMA_Abort_IT+0x3f4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1e      	ldr	r2, [pc, #120]	@ (8002684 <HAL_DMA_Abort_IT+0x3f8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <HAL_DMA_Abort_IT+0x3fc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_DMA_Abort_IT+0x400>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Abort_IT+0x3a2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_DMA_Abort_IT+0x404>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d132      	bne.n	8002694 <HAL_DMA_Abort_IT+0x408>
 800262e:	2301      	movs	r3, #1
 8002630:	e031      	b.n	8002696 <HAL_DMA_Abort_IT+0x40a>
 8002632:	bf00      	nop
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
 8002674:	58025408 	.word	0x58025408
 8002678:	5802541c 	.word	0x5802541c
 800267c:	58025430 	.word	0x58025430
 8002680:	58025444 	.word	0x58025444
 8002684:	58025458 	.word	0x58025458
 8002688:	5802546c 	.word	0x5802546c
 800268c:	58025480 	.word	0x58025480
 8002690:	58025494 	.word	0x58025494
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002726:	4b89      	ldr	r3, [pc, #548]	@ (800294c <HAL_GPIO_Init+0x234>)
 8002728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800272a:	e194      	b.n	8002a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8186 	beq.w	8002a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d005      	beq.n	800275c <HAL_GPIO_Init+0x44>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d130      	bne.n	80027be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002792:	2201      	movs	r2, #1
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0201 	and.w	r2, r3, #1
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d017      	beq.n	80027fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d123      	bne.n	800284e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	69b9      	ldr	r1, [r7, #24]
 800284a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80e0 	beq.w	8002a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002890:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_GPIO_Init+0x238>)
 8002892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002896:	4a2e      	ldr	r2, [pc, #184]	@ (8002950 <HAL_GPIO_Init+0x238>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <HAL_GPIO_Init+0x238>)
 80028a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <HAL_GPIO_Init+0x23c>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a20      	ldr	r2, [pc, #128]	@ (8002958 <HAL_GPIO_Init+0x240>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d052      	beq.n	8002980 <HAL_GPIO_Init+0x268>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_GPIO_Init+0x244>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_GPIO_Init+0x22e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <HAL_GPIO_Init+0x248>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02b      	beq.n	8002942 <HAL_GPIO_Init+0x22a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_GPIO_Init+0x24c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d025      	beq.n	800293e <HAL_GPIO_Init+0x226>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_GPIO_Init+0x250>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01f      	beq.n	800293a <HAL_GPIO_Init+0x222>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_GPIO_Init+0x254>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_GPIO_Init+0x258>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x21a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a19      	ldr	r2, [pc, #100]	@ (8002974 <HAL_GPIO_Init+0x25c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00d      	beq.n	800292e <HAL_GPIO_Init+0x216>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_GPIO_Init+0x260>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x212>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a17      	ldr	r2, [pc, #92]	@ (800297c <HAL_GPIO_Init+0x264>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_GPIO_Init+0x20e>
 8002922:	2309      	movs	r3, #9
 8002924:	e02d      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 8002926:	230a      	movs	r3, #10
 8002928:	e02b      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 800292a:	2308      	movs	r3, #8
 800292c:	e029      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 800292e:	2307      	movs	r3, #7
 8002930:	e027      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 8002932:	2306      	movs	r3, #6
 8002934:	e025      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 8002936:	2305      	movs	r3, #5
 8002938:	e023      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 800293a:	2304      	movs	r3, #4
 800293c:	e021      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 800293e:	2303      	movs	r3, #3
 8002940:	e01f      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 8002942:	2302      	movs	r3, #2
 8002944:	e01d      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 8002946:	2301      	movs	r3, #1
 8002948:	e01b      	b.n	8002982 <HAL_GPIO_Init+0x26a>
 800294a:	bf00      	nop
 800294c:	58000080 	.word	0x58000080
 8002950:	58024400 	.word	0x58024400
 8002954:	58000400 	.word	0x58000400
 8002958:	58020000 	.word	0x58020000
 800295c:	58020400 	.word	0x58020400
 8002960:	58020800 	.word	0x58020800
 8002964:	58020c00 	.word	0x58020c00
 8002968:	58021000 	.word	0x58021000
 800296c:	58021400 	.word	0x58021400
 8002970:	58021800 	.word	0x58021800
 8002974:	58021c00 	.word	0x58021c00
 8002978:	58022000 	.word	0x58022000
 800297c:	58022400 	.word	0x58022400
 8002980:	2300      	movs	r3, #0
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002992:	4938      	ldr	r1, [pc, #224]	@ (8002a74 <HAL_GPIO_Init+0x35c>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f ae63 	bne.w	800272c <HAL_GPIO_Init+0x14>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	3724      	adds	r7, #36	@ 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	58000400 	.word	0x58000400

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	041a      	lsls	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	400b      	ands	r3, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ae8:	4a08      	ldr	r2, [pc, #32]	@ (8002b0c <HAL_HSEM_FastTake+0x2c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3320      	adds	r3, #32
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <HAL_HSEM_FastTake+0x30>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	58026400 	.word	0x58026400
 8002b10:	80000300 	.word	0x80000300

08002b14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002b1e:	4906      	ldr	r1, [pc, #24]	@ (8002b38 <HAL_HSEM_Release+0x24>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	58026400 	.word	0x58026400

08002b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e08b      	b.n	8002c66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe fcba 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d108      	bne.n	8002bde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e007      	b.n	8002bee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <HAL_I2C_Init+0x134>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	02008000 	.word	0x02008000

08002c74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	460b      	mov	r3, r1
 8002c82:	817b      	strh	r3, [r7, #10]
 8002c84:	4613      	mov	r3, r2
 8002c86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	f040 80fd 	bne.w	8002e90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x30>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0f6      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fe7a 	bl	80019a4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2319      	movs	r3, #25
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fa24 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e1      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2221      	movs	r2, #33	@ 0x21
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	893a      	ldrh	r2, [r7, #8]
 8002cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2bff      	cmp	r3, #255	@ 0xff
 8002cfe:	d906      	bls.n	8002d0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	22ff      	movs	r2, #255	@ 0xff
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e007      	b.n	8002d1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	4b4e      	ldr	r3, [pc, #312]	@ (8002e9c <HAL_I2C_Master_Transmit+0x228>)
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fc1f 	bl	80035ac <I2C_TransferConfig>
 8002d6e:	e066      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <HAL_I2C_Master_Transmit+0x228>)
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fc14 	bl	80035ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d84:	e05b      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa17 	bl	80031be <I2C_WaitOnTXISFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07b      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d034      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x1ca>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d130      	bne.n	8002e3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2180      	movs	r1, #128	@ 0x80
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f990 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e04d      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2bff      	cmp	r3, #255	@ 0xff
 8002dfe:	d90e      	bls.n	8002e1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	22ff      	movs	r2, #255	@ 0xff
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fbc8 	bl	80035ac <I2C_TransferConfig>
 8002e1c:	e00f      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	2300      	movs	r3, #0
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fbb7 	bl	80035ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d19e      	bne.n	8002d86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	6a39      	ldr	r1, [r7, #32]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f9fd 	bl	800324c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e01a      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <HAL_I2C_Master_Transmit+0x22c>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	80002000 	.word	0x80002000
 8002ea0:	fe00e800 	.word	0xfe00e800

08002ea4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	817b      	strh	r3, [r7, #10]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	f040 80db 	bne.w	800307c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0x30>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0d4      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe fd62 	bl	80019a4 <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2319      	movs	r3, #25
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f90c 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0bf      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2222      	movs	r2, #34	@ 0x22
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2bff      	cmp	r3, #255	@ 0xff
 8002f2e:	d90e      	bls.n	8002f4e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	22ff      	movs	r2, #255	@ 0xff
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	4b52      	ldr	r3, [pc, #328]	@ (8003088 <HAL_I2C_Master_Receive+0x1e4>)
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fb30 	bl	80035ac <I2C_TransferConfig>
 8002f4c:	e06d      	b.n	800302a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	4b49      	ldr	r3, [pc, #292]	@ (8003088 <HAL_I2C_Master_Receive+0x1e4>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fb1f 	bl	80035ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f6e:	e05c      	b.n	800302a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6a39      	ldr	r1, [r7, #32]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f9ad 	bl	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e07c      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d034      	beq.n	800302a <HAL_I2C_Master_Receive+0x186>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d130      	bne.n	800302a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	@ 0x80
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f89a 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e04d      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2bff      	cmp	r3, #255	@ 0xff
 8002fea:	d90e      	bls.n	800300a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fad2 	bl	80035ac <I2C_TransferConfig>
 8003008:	e00f      	b.n	800302a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fac1 	bl	80035ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d19d      	bne.n	8002f70 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	6a39      	ldr	r1, [r7, #32]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f907 	bl	800324c <I2C_WaitOnSTOPFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01a      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2220      	movs	r2, #32
 800304e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <HAL_I2C_Master_Receive+0x1e8>)
 800305c:	400b      	ands	r3, r1
 800305e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	80002400 	.word	0x80002400
 800308c:	fe00e800 	.word	0xfe00e800

08003090 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
  }
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d103      	bne.n	80030e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	619a      	str	r2, [r3, #24]
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311c:	e03b      	b.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f962 	bl	80033ec <I2C_IsErrorOccurred>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e041      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d02d      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe fc33 	bl	80019a4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x44>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d122      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	429a      	cmp	r2, r3
 800316c:	d113      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d0b4      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ca:	e033      	b.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f90b 	bl	80033ec <I2C_IsErrorOccurred>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e031      	b.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d025      	beq.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe fbdc 	bl	80019a4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11a      	bne.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d013      	beq.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d1c4      	bne.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003258:	e02f      	b.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8c4 	bl	80033ec <I2C_IsErrorOccurred>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e02d      	b.n	80032ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe fb99 	bl	80019a4 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11a      	bne.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d013      	beq.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d1c8      	bne.n	800325a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80032e4:	e071      	b.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f87e 	bl	80033ec <I2C_IsErrorOccurred>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d13b      	bne.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d138      	bne.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d105      	bne.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b10      	cmp	r3, #16
 8003334:	d121      	bne.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2210      	movs	r2, #16
 800333c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2204      	movs	r2, #4
 8003342:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003358:	400b      	ands	r3, r1
 800335a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
 8003378:	e002      	b.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003380:	f7fe fb10 	bl	80019a4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d119      	bne.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00f      	beq.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d002      	beq.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d083      	beq.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d068      	beq.n	80034ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2210      	movs	r2, #16
 800341e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003420:	e049      	b.n	80034b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d045      	beq.n	80034b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fabb 	bl	80019a4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_IsErrorOccurred+0x54>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13a      	bne.n	80034b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003452:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003462:	d121      	bne.n	80034a8 <I2C_IsErrorOccurred+0xbc>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346a:	d01d      	beq.n	80034a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b20      	cmp	r3, #32
 8003470:	d01a      	beq.n	80034a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003480:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003482:	f7fe fa8f 	bl	80019a4 <HAL_GetTick>
 8003486:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	e00e      	b.n	80034a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800348a:	f7fe fa8b 	bl	80019a4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b19      	cmp	r3, #25
 8003496:	d907      	bls.n	80034a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034a6:	e006      	b.n	80034b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d1e9      	bne.n	800348a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d003      	beq.n	80034cc <I2C_IsErrorOccurred+0xe0>
 80034c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0aa      	beq.n	8003422 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2220      	movs	r2, #32
 80034da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800350c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01c      	beq.n	800359a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fdaf 	bl	80030c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <I2C_IsErrorOccurred+0x1bc>)
 8003572:	400b      	ands	r3, r1
 8003574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800359a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3728      	adds	r7, #40	@ 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	4613      	mov	r3, r2
 80035bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c4:	7a7b      	ldrb	r3, [r7, #9]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	0d5b      	lsrs	r3, r3, #21
 80035e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <I2C_TransferConfig+0x60>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	43db      	mvns	r3, r3
 80035f0:	ea02 0103 	and.w	r1, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	03ff63ff 	.word	0x03ff63ff

08003610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d138      	bne.n	8003698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003630:	2302      	movs	r3, #2
 8003632:	e032      	b.n	800369a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	@ 0x24
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d139      	bne.n	8003730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e033      	b.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2224      	movs	r2, #36	@ 0x24
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003748:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	2b06      	cmp	r3, #6
 8003752:	d00a      	beq.n	800376a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003754:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e040      	b.n	80037e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e03e      	b.n	80037e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800376a:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003772:	491f      	ldr	r1, [pc, #124]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4313      	orrs	r3, r2
 8003778:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800377a:	f7fe f913 	bl	80019a4 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003780:	e009      	b.n	8003796 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003782:	f7fe f90f 	bl	80019a4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003790:	d901      	bls.n	8003796 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e028      	b.n	80037e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003796:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a2:	d1ee      	bne.n	8003782 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b1e      	cmp	r3, #30
 80037a8:	d008      	beq.n	80037bc <HAL_PWREx_ConfigSupply+0x7c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80037ae:	d005      	beq.n	80037bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b1d      	cmp	r3, #29
 80037b4:	d002      	beq.n	80037bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b2d      	cmp	r3, #45	@ 0x2d
 80037ba:	d114      	bne.n	80037e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80037bc:	f7fe f8f2 	bl	80019a4 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80037c2:	e009      	b.n	80037d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037c4:	f7fe f8ee 	bl	80019a4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d2:	d901      	bls.n	80037d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d1ee      	bne.n	80037c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	58024800 	.word	0x58024800

080037f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f000 bc48 	b.w	8004098 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8088 	beq.w	8003926 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003816:	4b99      	ldr	r3, [pc, #612]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003820:	4b96      	ldr	r3, [pc, #600]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	2b10      	cmp	r3, #16
 800382a:	d007      	beq.n	800383c <HAL_RCC_OscConfig+0x48>
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	2b18      	cmp	r3, #24
 8003830:	d111      	bne.n	8003856 <HAL_RCC_OscConfig+0x62>
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d06d      	beq.n	8003924 <HAL_RCC_OscConfig+0x130>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d169      	bne.n	8003924 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f000 bc21 	b.w	8004098 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x7a>
 8003860:	4b86      	ldr	r3, [pc, #536]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a85      	ldr	r2, [pc, #532]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e02e      	b.n	80038cc <HAL_RCC_OscConfig+0xd8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x9c>
 8003876:	4b81      	ldr	r3, [pc, #516]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a80      	ldr	r2, [pc, #512]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 800387c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b7e      	ldr	r3, [pc, #504]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7d      	ldr	r2, [pc, #500]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e01d      	b.n	80038cc <HAL_RCC_OscConfig+0xd8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0xc0>
 800389a:	4b78      	ldr	r3, [pc, #480]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a77      	ldr	r2, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b75      	ldr	r3, [pc, #468]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a74      	ldr	r2, [pc, #464]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0xd8>
 80038b4:	4b71      	ldr	r3, [pc, #452]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a70      	ldr	r2, [pc, #448]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b6e      	ldr	r3, [pc, #440]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6d      	ldr	r2, [pc, #436]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f866 	bl	80019a4 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe f862 	bl	80019a4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	@ 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e3d4      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ee:	4b63      	ldr	r3, [pc, #396]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0xe8>
 80038fa:	e014      	b.n	8003926 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f852 	bl	80019a4 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe f84e 	bl	80019a4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e3c0      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003916:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x110>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80ca 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003934:	4b51      	ldr	r3, [pc, #324]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800393c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800393e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_RCC_OscConfig+0x166>
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b18      	cmp	r3, #24
 800394e:	d156      	bne.n	80039fe <HAL_RCC_OscConfig+0x20a>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d151      	bne.n	80039fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395a:	4b48      	ldr	r3, [pc, #288]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x17e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e392      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003972:	4b42      	ldr	r3, [pc, #264]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0219 	bic.w	r2, r3, #25
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	493f      	ldr	r1, [pc, #252]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe f80e 	bl	80019a4 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398c:	f7fe f80a 	bl	80019a4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e37c      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	f7fe f835 	bl	8001a18 <HAL_GetREVID>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d817      	bhi.n	80039e8 <HAL_RCC_OscConfig+0x1f4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b40      	cmp	r3, #64	@ 0x40
 80039be:	d108      	bne.n	80039d2 <HAL_RCC_OscConfig+0x1de>
 80039c0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039c8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d0:	e07a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	4926      	ldr	r1, [pc, #152]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e6:	e06f      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	4921      	ldr	r1, [pc, #132]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039fc:	e064      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d047      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0219 	bic.w	r2, r3, #25
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	491a      	ldr	r1, [pc, #104]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd ffc4 	bl	80019a4 <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fd ffc0 	bl	80019a4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e332      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	f7fd ffeb 	bl	8001a18 <HAL_GetREVID>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d819      	bhi.n	8003a80 <HAL_RCC_OscConfig+0x28c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d108      	bne.n	8003a66 <HAL_RCC_OscConfig+0x272>
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a5c:	4a07      	ldr	r2, [pc, #28]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	6053      	str	r3, [r2, #4]
 8003a64:	e030      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
 8003a66:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	031b      	lsls	r3, r3, #12
 8003a74:	4901      	ldr	r1, [pc, #4]	@ (8003a7c <HAL_RCC_OscConfig+0x288>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e025      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	4b9a      	ldr	r3, [pc, #616]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4997      	ldr	r1, [pc, #604]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
 8003a94:	e018      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b95      	ldr	r3, [pc, #596]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a94      	ldr	r2, [pc, #592]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd ff7f 	bl	80019a4 <HAL_GetTick>
 8003aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fd ff7b 	bl	80019a4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e2ed      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003abc:	4b8b      	ldr	r3, [pc, #556]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a9 	beq.w	8003c28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4b85      	ldr	r3, [pc, #532]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ade:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae0:	4b82      	ldr	r3, [pc, #520]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d007      	beq.n	8003afc <HAL_RCC_OscConfig+0x308>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b18      	cmp	r3, #24
 8003af0:	d13a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x374>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d135      	bne.n	8003b68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003afc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x320>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b80      	cmp	r3, #128	@ 0x80
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e2c1      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b14:	f7fd ff80 	bl	8001a18 <HAL_GetREVID>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d817      	bhi.n	8003b52 <HAL_RCC_OscConfig+0x35e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x348>
 8003b2a:	4b70      	ldr	r3, [pc, #448]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b32:	4a6e      	ldr	r2, [pc, #440]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b3a:	e075      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	069b      	lsls	r3, r3, #26
 8003b4a:	4968      	ldr	r1, [pc, #416]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b50:	e06a      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b52:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4962      	ldr	r1, [pc, #392]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b66:	e05f      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d042      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b70:	4b5e      	ldr	r3, [pc, #376]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5d      	ldr	r2, [pc, #372]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd ff12 	bl	80019a4 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b84:	f7fd ff0e 	bl	80019a4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e280      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b96:	4b55      	ldr	r3, [pc, #340]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba2:	f7fd ff39 	bl	8001a18 <HAL_GetREVID>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d817      	bhi.n	8003be0 <HAL_RCC_OscConfig+0x3ec>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d108      	bne.n	8003bca <HAL_RCC_OscConfig+0x3d6>
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bc6:	6053      	str	r3, [r2, #4]
 8003bc8:	e02e      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
 8003bca:	4b48      	ldr	r3, [pc, #288]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	069b      	lsls	r3, r3, #26
 8003bd8:	4944      	ldr	r1, [pc, #272]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
 8003bde:	e023      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
 8003be0:	4b42      	ldr	r3, [pc, #264]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	493f      	ldr	r1, [pc, #252]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]
 8003bf4:	e018      	b.n	8003c28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fecf 	bl	80019a4 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fecb 	bl	80019a4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e23d      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c1c:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d036      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d019      	beq.n	8003c70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	4a2a      	ldr	r2, [pc, #168]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd feac 	bl	80019a4 <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c50:	f7fd fea8 	bl	80019a4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e21a      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x45c>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c74:	4a1d      	ldr	r2, [pc, #116]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fe92 	bl	80019a4 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fe8e 	bl	80019a4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e200      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d039      	beq.n	8003d22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0c      	ldr	r2, [pc, #48]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fe6f 	bl	80019a4 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cca:	f7fd fe6b 	bl	80019a4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e1dd      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x4d6>
 8003ce8:	e01b      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a9a      	ldr	r2, [pc, #616]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fe52 	bl	80019a4 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fd fe4e 	bl	80019a4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1c0      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d16:	4b92      	ldr	r3, [pc, #584]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8081 	beq.w	8003e32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d30:	4b8c      	ldr	r3, [pc, #560]	@ (8003f64 <HAL_RCC_OscConfig+0x770>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a8b      	ldr	r2, [pc, #556]	@ (8003f64 <HAL_RCC_OscConfig+0x770>)
 8003d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d3c:	f7fd fe32 	bl	80019a4 <HAL_GetTick>
 8003d40:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d44:	f7fd fe2e 	bl	80019a4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1a0      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d56:	4b83      	ldr	r3, [pc, #524]	@ (8003f64 <HAL_RCC_OscConfig+0x770>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x584>
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d76:	e02d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x5e0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5a6>
 8003d80:	4b77      	ldr	r3, [pc, #476]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a76      	ldr	r2, [pc, #472]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	4b74      	ldr	r3, [pc, #464]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	4a73      	ldr	r2, [pc, #460]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d98:	e01c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x5e0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5c8>
 8003da2:	4b6f      	ldr	r3, [pc, #444]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dae:	4b6c      	ldr	r3, [pc, #432]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	4a6b      	ldr	r2, [pc, #428]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x5e0>
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	4a67      	ldr	r2, [pc, #412]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc8:	4b65      	ldr	r3, [pc, #404]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dcc:	4a64      	ldr	r2, [pc, #400]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003dce:	f023 0304 	bic.w	r3, r3, #4
 8003dd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d015      	beq.n	8003e08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fde2 	bl	80019a4 <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fdde 	bl	80019a4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e14e      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfa:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ee      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5f0>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd fdcc 	bl	80019a4 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fd fdc8 	bl	80019a4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e138      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e26:	4b4e      	ldr	r3, [pc, #312]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1ee      	bne.n	8003e10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 812d 	beq.w	8004096 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e3c:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e44:	2b18      	cmp	r3, #24
 8003e46:	f000 80bd 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	f040 809e 	bne.w	8003f90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b42      	ldr	r3, [pc, #264]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a41      	ldr	r2, [pc, #260]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fda0 	bl	80019a4 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fd fd9c 	bl	80019a4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e10e      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e7a:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e8a:	4b37      	ldr	r3, [pc, #220]	@ (8003f68 <HAL_RCC_OscConfig+0x774>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4931      	ldr	r1, [pc, #196]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ed0:	4923      	ldr	r1, [pc, #140]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ed6:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee6:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x778>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	491b      	ldr	r1, [pc, #108]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	f023 020c 	bic.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4917      	ldr	r1, [pc, #92]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	f023 0202 	bic.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	4912      	ldr	r1, [pc, #72]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a10      	ldr	r2, [pc, #64]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f3e:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fd25 	bl	80019a4 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5c:	e011      	b.n	8003f82 <HAL_RCC_OscConfig+0x78e>
 8003f5e:	bf00      	nop
 8003f60:	58024400 	.word	0x58024400
 8003f64:	58024800 	.word	0x58024800
 8003f68:	fffffc0c 	.word	0xfffffc0c
 8003f6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd fd18 	bl	80019a4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e08a      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f82:	4b47      	ldr	r3, [pc, #284]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x77c>
 8003f8e:	e082      	b.n	8004096 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f90:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a42      	ldr	r2, [pc, #264]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fd02 	bl	80019a4 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd fcfe 	bl	80019a4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e070      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x7b0>
 8003fc2:	e068      	b.n	8004096 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fc4:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fca:	4b35      	ldr	r3, [pc, #212]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d031      	beq.n	800403c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d12a      	bne.n	800403c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d122      	bne.n	800403c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d11a      	bne.n	800403c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0a5b      	lsrs	r3, r3, #9
 800400a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d111      	bne.n	800403c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d108      	bne.n	800403c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e02b      	b.n	8004098 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004040:	4b17      	ldr	r3, [pc, #92]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8004042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800404a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	429a      	cmp	r2, r3
 8004054:	d01f      	beq.n	8004096 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004056:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004062:	f7fd fc9f 	bl	80019a4 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004068:	bf00      	nop
 800406a:	f7fd fc9b 	bl	80019a4 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	4293      	cmp	r3, r2
 8004074:	d0f9      	beq.n	800406a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8004078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <HAL_RCC_OscConfig+0x8b0>)
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004082:	00d2      	lsls	r2, r2, #3
 8004084:	4906      	ldr	r1, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8004086:	4313      	orrs	r3, r2
 8004088:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800408a:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	4a04      	ldr	r2, [pc, #16]	@ (80040a0 <HAL_RCC_OscConfig+0x8ac>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3730      	adds	r7, #48	@ 0x30
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	58024400 	.word	0x58024400
 80040a4:	ffff0007 	.word	0xffff0007

080040a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e19c      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b8a      	ldr	r3, [pc, #552]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b87      	ldr	r3, [pc, #540]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	4985      	ldr	r1, [pc, #532]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b83      	ldr	r3, [pc, #524]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e184      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	4b7b      	ldr	r3, [pc, #492]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004104:	429a      	cmp	r2, r3
 8004106:	d908      	bls.n	800411a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004108:	4b78      	ldr	r3, [pc, #480]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4975      	ldr	r1, [pc, #468]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004116:	4313      	orrs	r3, r2
 8004118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	4b70      	ldr	r3, [pc, #448]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004132:	429a      	cmp	r2, r3
 8004134:	d908      	bls.n	8004148 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	496a      	ldr	r1, [pc, #424]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004144:	4313      	orrs	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	4b64      	ldr	r3, [pc, #400]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004160:	429a      	cmp	r2, r3
 8004162:	d908      	bls.n	8004176 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	495e      	ldr	r1, [pc, #376]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004172:	4313      	orrs	r3, r2
 8004174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	4b59      	ldr	r3, [pc, #356]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800418e:	429a      	cmp	r2, r3
 8004190:	d908      	bls.n	80041a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004192:	4b56      	ldr	r3, [pc, #344]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4953      	ldr	r1, [pc, #332]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4b4d      	ldr	r3, [pc, #308]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	429a      	cmp	r2, r3
 80041be:	d908      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b4a      	ldr	r3, [pc, #296]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f023 020f 	bic.w	r2, r3, #15
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4947      	ldr	r1, [pc, #284]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d055      	beq.n	800428a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041de:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4940      	ldr	r1, [pc, #256]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041f8:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d121      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0f6      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004210:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d115      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0ea      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004228:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0de      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004238:	4b2c      	ldr	r3, [pc, #176]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0d6      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f023 0207 	bic.w	r2, r3, #7
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4925      	ldr	r1, [pc, #148]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425a:	f7fd fba3 	bl	80019a4 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	e00a      	b.n	8004278 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004262:	f7fd fb9f 	bl	80019a4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0be      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004278:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	429a      	cmp	r2, r3
 8004288:	d1eb      	bne.n	8004262 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d208      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a6:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f023 020f 	bic.w	r2, r3, #15
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	490e      	ldr	r1, [pc, #56]	@ (80042ec <HAL_RCC_ClockConfig+0x244>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d214      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 020f 	bic.w	r2, r3, #15
 80042ce:	4906      	ldr	r1, [pc, #24]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <HAL_RCC_ClockConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e086      	b.n	80043f6 <HAL_RCC_ClockConfig+0x34e>
 80042e8:	52002000 	.word	0x52002000
 80042ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	4b3f      	ldr	r3, [pc, #252]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004308:	429a      	cmp	r2, r3
 800430a:	d208      	bcs.n	800431e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800430c:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	4939      	ldr	r1, [pc, #228]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800431a:	4313      	orrs	r3, r2
 800431c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004336:	429a      	cmp	r2, r3
 8004338:	d208      	bcs.n	800434c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800433a:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	492e      	ldr	r1, [pc, #184]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 8004348:	4313      	orrs	r3, r2
 800434a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004364:	429a      	cmp	r2, r3
 8004366:	d208      	bcs.n	800437a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004368:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4922      	ldr	r1, [pc, #136]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 8004376:	4313      	orrs	r3, r2
 8004378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d010      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004392:	429a      	cmp	r2, r3
 8004394:	d208      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004396:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4917      	ldr	r1, [pc, #92]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043a8:	f000 f834 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	4912      	ldr	r1, [pc, #72]	@ (8004404 <HAL_RCC_ClockConfig+0x35c>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <HAL_RCC_ClockConfig+0x358>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <HAL_RCC_ClockConfig+0x35c>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <HAL_RCC_ClockConfig+0x360>)
 80043de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043e0:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <HAL_RCC_ClockConfig+0x364>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCC_ClockConfig+0x368>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fa90 	bl	8001910 <HAL_InitTick>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400
 8004404:	08008fc4 	.word	0x08008fc4
 8004408:	24000004 	.word	0x24000004
 800440c:	24000000 	.word	0x24000000
 8004410:	240000e0 	.word	0x240000e0

08004414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	@ 0x24
 8004418:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441a:	4bb3      	ldr	r3, [pc, #716]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004422:	2b18      	cmp	r3, #24
 8004424:	f200 8155 	bhi.w	80046d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004428:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <HAL_RCC_GetSysClockFreq+0x1c>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004495 	.word	0x08004495
 8004434:	080046d3 	.word	0x080046d3
 8004438:	080046d3 	.word	0x080046d3
 800443c:	080046d3 	.word	0x080046d3
 8004440:	080046d3 	.word	0x080046d3
 8004444:	080046d3 	.word	0x080046d3
 8004448:	080046d3 	.word	0x080046d3
 800444c:	080046d3 	.word	0x080046d3
 8004450:	080044bb 	.word	0x080044bb
 8004454:	080046d3 	.word	0x080046d3
 8004458:	080046d3 	.word	0x080046d3
 800445c:	080046d3 	.word	0x080046d3
 8004460:	080046d3 	.word	0x080046d3
 8004464:	080046d3 	.word	0x080046d3
 8004468:	080046d3 	.word	0x080046d3
 800446c:	080046d3 	.word	0x080046d3
 8004470:	080044c1 	.word	0x080044c1
 8004474:	080046d3 	.word	0x080046d3
 8004478:	080046d3 	.word	0x080046d3
 800447c:	080046d3 	.word	0x080046d3
 8004480:	080046d3 	.word	0x080046d3
 8004484:	080046d3 	.word	0x080046d3
 8004488:	080046d3 	.word	0x080046d3
 800448c:	080046d3 	.word	0x080046d3
 8004490:	080044c7 	.word	0x080044c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004494:	4b94      	ldr	r3, [pc, #592]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044a0:	4b91      	ldr	r3, [pc, #580]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	4a90      	ldr	r2, [pc, #576]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
 80044b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044b2:	e111      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044b4:	4b8d      	ldr	r3, [pc, #564]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044b6:	61bb      	str	r3, [r7, #24]
      break;
 80044b8:	e10e      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044ba:	4b8d      	ldr	r3, [pc, #564]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044bc:	61bb      	str	r3, [r7, #24]
      break;
 80044be:	e10b      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044c0:	4b8c      	ldr	r3, [pc, #560]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044c2:	61bb      	str	r3, [r7, #24]
      break;
 80044c4:	e108      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044c6:	4b88      	ldr	r3, [pc, #544]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044d0:	4b85      	ldr	r3, [pc, #532]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044dc:	4b82      	ldr	r3, [pc, #520]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044e6:	4b80      	ldr	r3, [pc, #512]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80e1 	beq.w	80046cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b02      	cmp	r3, #2
 800450e:	f000 8083 	beq.w	8004618 <HAL_RCC_GetSysClockFreq+0x204>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b02      	cmp	r3, #2
 8004516:	f200 80a1 	bhi.w	800465c <HAL_RCC_GetSysClockFreq+0x248>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x114>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d056      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004526:	e099      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004528:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02d      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004534:	4b6c      	ldr	r3, [pc, #432]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	4a6b      	ldr	r2, [pc, #428]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b62      	ldr	r3, [pc, #392]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004572:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800458e:	e087      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b51      	ldr	r3, [pc, #324]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045d2:	e065      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004700 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004616:	e043      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004704 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b2f      	ldr	r3, [pc, #188]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a02 	vldr	s12, [r7, #8]
 800463e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800465a:	e021      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004700 <HAL_RCC_GetSysClockFreq+0x2ec>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004682:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800469e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046aa:	3301      	adds	r3, #1
 80046ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c4:	ee17 3a90 	vmov	r3, s15
 80046c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
      break;
 80046d0:	e002      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046d2:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046d4:	61bb      	str	r3, [r7, #24]
      break;
 80046d6:	bf00      	nop
  }

  return sysclockfreq;
 80046d8:	69bb      	ldr	r3, [r7, #24]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	@ 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	003d0900 	.word	0x003d0900
 80046f4:	017d7840 	.word	0x017d7840
 80046f8:	46000000 	.word	0x46000000
 80046fc:	4c742400 	.word	0x4c742400
 8004700:	4a742400 	.word	0x4a742400
 8004704:	4bbebc20 	.word	0x4bbebc20

08004708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800470e:	f7ff fe81 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b10      	ldr	r3, [pc, #64]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x50>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	490f      	ldr	r1, [pc, #60]	@ (800475c <HAL_RCC_GetHCLKFreq+0x54>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800472c:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x50>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	4a09      	ldr	r2, [pc, #36]	@ (800475c <HAL_RCC_GetHCLKFreq+0x54>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <HAL_RCC_GetHCLKFreq+0x58>)
 8004744:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004746:	4a07      	ldr	r2, [pc, #28]	@ (8004764 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <HAL_RCC_GetHCLKFreq+0x58>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	58024400 	.word	0x58024400
 800475c:	08008fc4 	.word	0x08008fc4
 8004760:	24000004 	.word	0x24000004
 8004764:	24000000 	.word	0x24000000

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800476c:	f7ff ffcc 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4904      	ldr	r1, [pc, #16]	@ (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	58024400 	.word	0x58024400
 8004790:	08008fc4 	.word	0x08008fc4

08004794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004798:	f7ff ffb6 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4904      	ldr	r1, [pc, #16]	@ (80047bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	58024400 	.word	0x58024400
 80047bc:	08008fc4 	.word	0x08008fc4

080047c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0ca      	sub	sp, #296	@ 0x128
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80047e4:	2500      	movs	r5, #0
 80047e6:	ea54 0305 	orrs.w	r3, r4, r5
 80047ea:	d049      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047f6:	d02f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047fc:	d828      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004802:	d01a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004808:	d822      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800480e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004812:	d007      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004814:	e01c      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004816:	4bb8      	ldr	r3, [pc, #736]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	4ab7      	ldr	r2, [pc, #732]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004822:	e01a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	3308      	adds	r3, #8
 800482a:	2102      	movs	r1, #2
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fc8f 	bl	8006150 <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004838:	e00f      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	3328      	adds	r3, #40	@ 0x28
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fd36 	bl	80062b4 <RCCEx_PLL3_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800484e:	e004      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004862:	4ba5      	ldr	r3, [pc, #660]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004866:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004870:	4aa1      	ldr	r2, [pc, #644]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004872:	430b      	orrs	r3, r1
 8004874:	6513      	str	r3, [r2, #80]	@ 0x50
 8004876:	e003      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800488c:	f04f 0900 	mov.w	r9, #0
 8004890:	ea58 0309 	orrs.w	r3, r8, r9
 8004894:	d047      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	2b04      	cmp	r3, #4
 800489e:	d82a      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048a0:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	080048cb 	.word	0x080048cb
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048ff 	.word	0x080048ff
 80048b8:	080048ff 	.word	0x080048ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048bc:	4b8e      	ldr	r3, [pc, #568]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4a8d      	ldr	r2, [pc, #564]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048c8:	e01a      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3308      	adds	r3, #8
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fc3c 	bl	8006150 <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048de:	e00f      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	3328      	adds	r3, #40	@ 0x28
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 fce3 	bl	80062b4 <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048f4:	e004      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fc:	e000      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004908:	4b7b      	ldr	r3, [pc, #492]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800490a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490c:	f023 0107 	bic.w	r1, r3, #7
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	4a78      	ldr	r2, [pc, #480]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6513      	str	r3, [r2, #80]	@ 0x50
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004932:	f04f 0b00 	mov.w	fp, #0
 8004936:	ea5a 030b 	orrs.w	r3, sl, fp
 800493a:	d04c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004946:	d030      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494c:	d829      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800494e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004950:	d02d      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004952:	2bc0      	cmp	r3, #192	@ 0xc0
 8004954:	d825      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800495a:	2b80      	cmp	r3, #128	@ 0x80
 800495c:	d821      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d007      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004966:	e01c      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b63      	ldr	r3, [pc, #396]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a62      	ldr	r2, [pc, #392]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004974:	e01c      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	3308      	adds	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fbe6 	bl	8006150 <RCCEx_PLL2_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800498a:	e011      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	3328      	adds	r3, #40	@ 0x28
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fc8d 	bl	80062b4 <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a8:	e002      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80049aa:	bf00      	nop
 80049ac:	e000      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80049ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049b8:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c6:	4a4c      	ldr	r2, [pc, #304]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80049cc:	e003      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80049e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80049ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80049f0:	460b      	mov	r3, r1
 80049f2:	4313      	orrs	r3, r2
 80049f4:	d053      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a02:	d035      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a08:	d82e      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a0e:	d031      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a14:	d828      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a1a:	d01a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a20:	d822      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a2a:	d007      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a2c:	e01c      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a3a:	e01c      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	3308      	adds	r3, #8
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fb83 	bl	8006150 <RCCEx_PLL2_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a50:	e011      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3328      	adds	r3, #40	@ 0x28
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fc2a 	bl	80062b4 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a66:	e006      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a70:	bf00      	nop
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a94:	e003      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004aaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ab4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d056      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aca:	d038      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad0:	d831      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ad2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ad6:	d034      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004adc:	d82b      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ae2:	d01d      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ae8:	d825      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004af4:	e01f      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4ba2      	ldr	r3, [pc, #648]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	4aa1      	ldr	r2, [pc, #644]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b08:	e01c      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	3308      	adds	r3, #8
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fb1c 	bl	8006150 <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e011      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b24:	3328      	adds	r3, #40	@ 0x28
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fbc3 	bl	80062b4 <RCCEx_PLL3_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d03a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b92:	2b30      	cmp	r3, #48	@ 0x30
 8004b94:	d01f      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b96:	2b30      	cmp	r3, #48	@ 0x30
 8004b98:	d819      	bhi.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d815      	bhi.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d019      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d111      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	4b77      	ldr	r3, [pc, #476]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	4a76      	ldr	r2, [pc, #472]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004bb6:	e011      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 fac5 	bl	8006150 <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bd4:	e002      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004be4:	4b68      	ldr	r3, [pc, #416]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	4a65      	ldr	r2, [pc, #404]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bf8:	e003      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c12:	2300      	movs	r3, #0
 8004c14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d051      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c2c:	d035      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c32:	d82e      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c38:	d031      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c3e:	d828      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c44:	d01a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4a:	d822      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d007      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004c56:	e01c      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c58:	4b4b      	ldr	r3, [pc, #300]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 fa6e 	bl	8006150 <RCCEx_PLL2_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e011      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c80:	3328      	adds	r3, #40	@ 0x28
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fb15 	bl	80062b4 <RCCEx_PLL3_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c98:	e002      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ca8:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb6:	4a34      	ldr	r2, [pc, #208]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d056      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf0:	d033      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf6:	d82c      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfc:	d02f      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d02:	d826      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d08:	d02b      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d0e:	d820      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d14:	d012      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d1a:	d81a      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d022      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d115      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fa0e 	bl	8006150 <RCCEx_PLL2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d3a:	e015      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d40:	3328      	adds	r3, #40	@ 0x28
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fab5 	bl	80062b4 <RCCEx_PLL3_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d50:	e00a      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d58:	e006      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e004      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e002      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10d      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d7e:	4a02      	ldr	r2, [pc, #8]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d84:	e006      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004daa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	d055      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc0:	d033      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc6:	d82c      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dcc:	d02f      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd2:	d826      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dd8:	d02b      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004dda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dde:	d820      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004de4:	d012      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dea:	d81a      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d022      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df4:	d115      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f9a6 	bl	8006150 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e0a:	e015      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	3328      	adds	r3, #40	@ 0x28
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fa4d 	bl	80062b4 <RCCEx_PLL3_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e20:	e00a      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e004      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e40:	4ba3      	ldr	r3, [pc, #652]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e50:	4a9f      	ldr	r2, [pc, #636]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e56:	e003      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d037      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e8a:	d00e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d816      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e9a:	d111      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a8b      	ldr	r2, [pc, #556]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00f      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f94c 	bl	8006150 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	4a7b      	ldr	r2, [pc, #492]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d039      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d81c      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f31 	.word	0x08004f31
 8004f28:	08004f3f 	.word	0x08004f3f
 8004f2c:	08004f5d 	.word	0x08004f5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f30:	4b67      	ldr	r3, [pc, #412]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4a66      	ldr	r2, [pc, #408]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f3c:	e00f      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	3308      	adds	r3, #8
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f902 	bl	8006150 <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f66:	4b5a      	ldr	r3, [pc, #360]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	f023 0103 	bic.w	r1, r3, #3
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	4a56      	ldr	r2, [pc, #344]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7a:	e003      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f000 809f 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4a      	ldr	r2, [pc, #296]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fcf7 	bl	80019a4 <HAL_GetTick>
 8004fb6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fcf2 	bl	80019a4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	@ 0x64
 8004fca:	d903      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ed      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d179      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ff4:	4053      	eors	r3, r2
 8004ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d015      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	4a30      	ldr	r2, [pc, #192]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005016:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005020:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005022:	4a2b      	ldr	r2, [pc, #172]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005028:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005036:	d118      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fc fcb4 	bl	80019a4 <HAL_GetTick>
 800503c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005040:	e00d      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc fcaf 	bl	80019a4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005052:	429a      	cmp	r2, r3
 8005054:	d903      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800505c:	e005      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505e:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0eb      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800506a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506e:	2b00      	cmp	r3, #0
 8005070:	d129      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005082:	d10e      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005094:	091a      	lsrs	r2, r3, #4
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005098:	4013      	ands	r3, r2
 800509a:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6113      	str	r3, [r2, #16]
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a0a      	ldr	r2, [pc, #40]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	4a04      	ldr	r2, [pc, #16]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	e00e      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80050ce:	e009      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80050d0:	58024400 	.word	0x58024400
 80050d4:	58024800 	.word	0x58024800
 80050d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f002 0301 	and.w	r3, r2, #1
 80050f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050fe:	460b      	mov	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	f000 8089 	beq.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800510c:	2b28      	cmp	r3, #40	@ 0x28
 800510e:	d86b      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005110:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	080051f1 	.word	0x080051f1
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051e9 	.word	0x080051e9
 8005138:	080051bd 	.word	0x080051bd
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051e9 	.word	0x080051e9
 8005158:	080051d3 	.word	0x080051d3
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051e9 	.word	0x080051e9
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051e9 	.word	0x080051e9
 8005178:	080051f1 	.word	0x080051f1
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051e9 	.word	0x080051e9
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051e9 	.word	0x080051e9
 8005198:	080051f1 	.word	0x080051f1
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	080051f1 	.word	0x080051f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	3308      	adds	r3, #8
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 ffc3 	bl	8006150 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051d0:	e00f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	3328      	adds	r3, #40	@ 0x28
 80051d8:	2101      	movs	r1, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f86a 	bl	80062b4 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051e6:	e004      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051fa:	4bbf      	ldr	r3, [pc, #764]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005208:	4abb      	ldr	r2, [pc, #748]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800520a:	430b      	orrs	r3, r1
 800520c:	6553      	str	r3, [r2, #84]	@ 0x54
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f002 0302 	and.w	r3, r2, #2
 8005224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800522e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005232:	460b      	mov	r3, r1
 8005234:	4313      	orrs	r3, r2
 8005236:	d041      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800523e:	2b05      	cmp	r3, #5
 8005240:	d824      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005242:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	08005295 	.word	0x08005295
 800524c:	08005261 	.word	0x08005261
 8005250:	08005277 	.word	0x08005277
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	3308      	adds	r3, #8
 8005266:	2101      	movs	r1, #1
 8005268:	4618      	mov	r0, r3
 800526a:	f000 ff71 	bl	8006150 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f818 	bl	80062b4 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800529e:	4b96      	ldr	r3, [pc, #600]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	f023 0107 	bic.w	r1, r3, #7
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ac:	4a92      	ldr	r2, [pc, #584]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80052b2:	e003      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f002 0304 	and.w	r3, r2, #4
 80052c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4313      	orrs	r3, r2
 80052da:	d044      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d825      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80052e8:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	08005309 	.word	0x08005309
 80052f8:	0800531f 	.word	0x0800531f
 80052fc:	0800533d 	.word	0x0800533d
 8005300:	0800533d 	.word	0x0800533d
 8005304:	0800533d 	.word	0x0800533d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	3308      	adds	r3, #8
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 ff1d 	bl	8006150 <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800531c:	e00f      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005322:	3328      	adds	r3, #40	@ 0x28
 8005324:	2101      	movs	r1, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ffc4 	bl	80062b4 <RCCEx_PLL3_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005332:	e004      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005346:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f023 0107 	bic.w	r1, r3, #7
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005356:	4a68      	ldr	r2, [pc, #416]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005358:	430b      	orrs	r3, r1
 800535a:	6593      	str	r3, [r2, #88]	@ 0x58
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f002 0320 	and.w	r3, r2, #32
 8005372:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005376:	2300      	movs	r3, #0
 8005378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800537c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d055      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005392:	d033      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005398:	d82c      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539e:	d02f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a4:	d826      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053aa:	d02b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80053ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053b0:	d820      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b6:	d012      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80053b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053bc:	d81a      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d022      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80053c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c6:	d115      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	3308      	adds	r3, #8
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 febd 	bl	8006150 <RCCEx_PLL2_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053dc:	e015      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	3328      	adds	r3, #40	@ 0x28
 80053e4:	2102      	movs	r1, #2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff64 	bl	80062b4 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053f2:	e00a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053fa:	e006      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053fc:	bf00      	nop
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005400:	bf00      	nop
 8005402:	e002      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005412:	4b39      	ldr	r3, [pc, #228]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005424:	430b      	orrs	r3, r1
 8005426:	6553      	str	r3, [r2, #84]	@ 0x54
 8005428:	e003      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800543e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005448:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d058      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800545a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800545e:	d033      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005460:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005464:	d82c      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546a:	d02f      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d826      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005472:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005476:	d02b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800547c:	d820      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005482:	d012      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005488:	d81a      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d022      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005492:	d115      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	3308      	adds	r3, #8
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fe57 	bl	8006150 <RCCEx_PLL2_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054a8:	e015      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ae:	3328      	adds	r3, #40	@ 0x28
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fefe 	bl	80062b4 <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054be:	e00a      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054c6:	e006      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054c8:	bf00      	nop
 80054ca:	e004      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054de:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ee:	4a02      	ldr	r2, [pc, #8]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800551a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d055      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800552c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005530:	d033      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005532:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005536:	d82c      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553c:	d02f      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800553e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005542:	d826      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005544:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005548:	d02b      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800554a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800554e:	d820      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005554:	d012      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800555a:	d81a      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d022      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005564:	d115      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556a:	3308      	adds	r3, #8
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fdee 	bl	8006150 <RCCEx_PLL2_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800557a:	e015      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	3328      	adds	r3, #40	@ 0x28
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fe95 	bl	80062b4 <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005590:	e00a      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005598:	e006      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800559a:	bf00      	nop
 800559c:	e004      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055b0:	4ba1      	ldr	r3, [pc, #644]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055c0:	4a9d      	ldr	r2, [pc, #628]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	e003      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f002 0308 	and.w	r3, r2, #8
 80055dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d01e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	3328      	adds	r3, #40	@ 0x28
 8005604:	2102      	movs	r1, #2
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fe54 	bl	80062b4 <RCCEx_PLL3_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005618:	4b87      	ldr	r3, [pc, #540]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005628:	4a83      	ldr	r2, [pc, #524]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562a:	430b      	orrs	r3, r1
 800562c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f002 0310 	and.w	r3, r2, #16
 800563a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800563e:	2300      	movs	r3, #0
 8005640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005644:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005648:	460b      	mov	r3, r1
 800564a:	4313      	orrs	r3, r2
 800564c:	d01e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565a:	d10c      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	2102      	movs	r1, #2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fe25 	bl	80062b4 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005676:	4b70      	ldr	r3, [pc, #448]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005686:	4a6c      	ldr	r2, [pc, #432]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800569c:	2300      	movs	r3, #0
 800569e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056a6:	460b      	mov	r3, r1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	d03e      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b8:	d022      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80056ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056be:	d81b      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80056ca:	e015      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	3308      	adds	r3, #8
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fd3b 	bl	8006150 <RCCEx_PLL2_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056e0:	e00f      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	3328      	adds	r3, #40	@ 0x28
 80056e8:	2102      	movs	r1, #2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fde2 	bl	80062b4 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800570a:	4b4b      	ldr	r3, [pc, #300]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800571a:	4a47      	ldr	r2, [pc, #284]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005738:	2300      	movs	r3, #0
 800573a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800573c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d03b      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005752:	d01f      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005754:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005758:	d818      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575e:	d003      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005760:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005764:	d007      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005766:	e011      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b33      	ldr	r3, [pc, #204]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	4a32      	ldr	r2, [pc, #200]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005774:	e00f      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fd98 	bl	80062b4 <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800579e:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	4a22      	ldr	r2, [pc, #136]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80057cc:	2300      	movs	r3, #0
 80057ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80057d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d034      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e8:	d007      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80057ea:	e011      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ec:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	4a11      	ldr	r2, [pc, #68]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057f8:	e00e      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	3308      	adds	r3, #8
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fca4 	bl	8006150 <RCCEx_PLL2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005820:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005824:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582e:	4a02      	ldr	r2, [pc, #8]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005830:	430b      	orrs	r3, r1
 8005832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005852:	2300      	movs	r3, #0
 8005854:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005856:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d00c      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005864:	3328      	adds	r3, #40	@ 0x28
 8005866:	2102      	movs	r1, #2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fd23 	bl	80062b4 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005886:	663b      	str	r3, [r7, #96]	@ 0x60
 8005888:	2300      	movs	r3, #0
 800588a:	667b      	str	r3, [r7, #100]	@ 0x64
 800588c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d038      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a2:	d018      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80058a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a8:	d811      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80058aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ae:	d014      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80058b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b4:	d80b      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	d106      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c0:	4bc3      	ldr	r3, [pc, #780]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	4ac2      	ldr	r2, [pc, #776]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058cc:	e008      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058d4:	e004      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058e8:	4bb9      	ldr	r3, [pc, #740]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f8:	4ab5      	ldr	r2, [pc, #724]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058fa:	430b      	orrs	r3, r1
 80058fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80058fe:	e003      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005914:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005916:	2300      	movs	r3, #0
 8005918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800591a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800591e:	460b      	mov	r3, r1
 8005920:	4313      	orrs	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005924:	4baa      	ldr	r3, [pc, #680]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005928:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005932:	4aa7      	ldr	r2, [pc, #668]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005934:	430b      	orrs	r3, r1
 8005936:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005944:	653b      	str	r3, [r7, #80]	@ 0x50
 8005946:	2300      	movs	r3, #0
 8005948:	657b      	str	r3, [r7, #84]	@ 0x54
 800594a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005954:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005964:	4a9a      	ldr	r2, [pc, #616]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005966:	430b      	orrs	r3, r1
 8005968:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005978:	2300      	movs	r3, #0
 800597a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005980:	460b      	mov	r3, r1
 8005982:	4313      	orrs	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005986:	4b92      	ldr	r3, [pc, #584]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005994:	4a8e      	ldr	r2, [pc, #568]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005996:	430b      	orrs	r3, r1
 8005998:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059a8:	2300      	movs	r3, #0
 80059aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d00e      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b6:	4b86      	ldr	r3, [pc, #536]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	4a85      	ldr	r2, [pc, #532]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059c0:	6113      	str	r3, [r2, #16]
 80059c2:	4b83      	ldr	r3, [pc, #524]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059c4:	6919      	ldr	r1, [r3, #16]
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059ce:	4a80      	ldr	r2, [pc, #512]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e2:	2300      	movs	r3, #0
 80059e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059f0:	4b77      	ldr	r3, [pc, #476]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	4a74      	ldr	r2, [pc, #464]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a20:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a30:	4a67      	ldr	r2, [pc, #412]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	2100      	movs	r1, #0
 8005a40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d011      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	3308      	adds	r3, #8
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fb78 	bl	8006150 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	6239      	str	r1, [r7, #32]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	d011      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	3308      	adds	r3, #8
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fb58 	bl	8006150 <RCCEx_PLL2_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	61b9      	str	r1, [r7, #24]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d011      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	2102      	movs	r1, #2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fb38 	bl	8006150 <RCCEx_PLL2_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	2100      	movs	r1, #0
 8005b00:	6139      	str	r1, [r7, #16]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d011      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fbca 	bl	80062b4 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	2100      	movs	r1, #0
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	d011      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	3328      	adds	r3, #40	@ 0x28
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fbaa 	bl	80062b4 <RCCEx_PLL3_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	d011      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	3328      	adds	r3, #40	@ 0x28
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb8a 	bl	80062b4 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005bb6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd0:	58024400 	.word	0x58024400

08005bd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bd8:	f7fe fd96 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4904      	ldr	r1, [pc, #16]	@ (8005bfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	08008fc4 	.word	0x08008fc4

08005c00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b089      	sub	sp, #36	@ 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c08:	4ba1      	ldr	r3, [pc, #644]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c12:	4b9f      	ldr	r3, [pc, #636]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	0b1b      	lsrs	r3, r3, #12
 8005c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c2a:	4b99      	ldr	r3, [pc, #612]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8111 	beq.w	8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	f000 8083 	beq.w	8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	f200 80a1 	bhi.w	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d056      	beq.n	8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c6a:	e099      	b.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c6c:	4b88      	ldr	r3, [pc, #544]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02d      	beq.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c78:	4b85      	ldr	r3, [pc, #532]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	08db      	lsrs	r3, r3, #3
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	4a84      	ldr	r2, [pc, #528]	@ (8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
 8005c88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cd2:	e087      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d16:	e065      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b59      	ldr	r3, [pc, #356]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5a:	e043      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b48      	ldr	r3, [pc, #288]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d9e:	e021      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b37      	ldr	r3, [pc, #220]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005de4:	4b2a      	ldr	r3, [pc, #168]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de8:	0a5b      	lsrs	r3, r3, #9
 8005dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0a:	ee17 2a90 	vmov	r2, s15
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e12:	4b1f      	ldr	r3, [pc, #124]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e38:	ee17 2a90 	vmov	r2, s15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e40:	4b13      	ldr	r3, [pc, #76]	@ (8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	0e1b      	lsrs	r3, r3, #24
 8005e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e66:	ee17 2a90 	vmov	r2, s15
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e6e:	e008      	b.n	8005e82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	3724      	adds	r7, #36	@ 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
 8005e94:	03d09000 	.word	0x03d09000
 8005e98:	46000000 	.word	0x46000000
 8005e9c:	4c742400 	.word	0x4c742400
 8005ea0:	4a742400 	.word	0x4a742400
 8005ea4:	4bbebc20 	.word	0x4bbebc20

08005ea8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	@ 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eb0:	4ba1      	ldr	r3, [pc, #644]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005eba:	4b9f      	ldr	r3, [pc, #636]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	0d1b      	lsrs	r3, r3, #20
 8005ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ed2:	4b99      	ldr	r3, [pc, #612]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8111 	beq.w	8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	f000 8083 	beq.w	8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	f200 80a1 	bhi.w	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d056      	beq.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f12:	e099      	b.n	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f14:	4b88      	ldr	r3, [pc, #544]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02d      	beq.n	8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f20:	4b85      	ldr	r3, [pc, #532]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	08db      	lsrs	r3, r3, #3
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	4a84      	ldr	r2, [pc, #528]	@ (800613c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f7a:	e087      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006144 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fbe:	e065      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b59      	ldr	r3, [pc, #356]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e043      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800614c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b48      	ldr	r3, [pc, #288]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e021      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b37      	ldr	r3, [pc, #220]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a03 	vldr	s12, [r7, #12]
 800606e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800608c:	4b2a      	ldr	r3, [pc, #168]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006090:	0a5b      	lsrs	r3, r3, #9
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b2:	ee17 2a90 	vmov	r2, s15
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e0:	ee17 2a90 	vmov	r2, s15
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060e8:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ec:	0e1b      	lsrs	r3, r3, #24
 80060ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006102:	edd7 6a07 	vldr	s13, [r7, #28]
 8006106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800610a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610e:	ee17 2a90 	vmov	r2, s15
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006116:	e008      	b.n	800612a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	609a      	str	r2, [r3, #8]
}
 800612a:	bf00      	nop
 800612c:	3724      	adds	r7, #36	@ 0x24
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	58024400 	.word	0x58024400
 800613c:	03d09000 	.word	0x03d09000
 8006140:	46000000 	.word	0x46000000
 8006144:	4c742400 	.word	0x4c742400
 8006148:	4a742400 	.word	0x4a742400
 800614c:	4bbebc20 	.word	0x4bbebc20

08006150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800615e:	4b53      	ldr	r3, [pc, #332]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b03      	cmp	r3, #3
 8006168:	d101      	bne.n	800616e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e099      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800616e:	4b4f      	ldr	r3, [pc, #316]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a4e      	ldr	r2, [pc, #312]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006174:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617a:	f7fb fc13 	bl	80019a4 <HAL_GetTick>
 800617e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	e008      	b.n	8006194 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006182:	f7fb fc0f 	bl	80019a4 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e086      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006194:	4b45      	ldr	r3, [pc, #276]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f0      	bne.n	8006182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061a0:	4b42      	ldr	r3, [pc, #264]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	493f      	ldr	r1, [pc, #252]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	025b      	lsls	r3, r3, #9
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	3b01      	subs	r3, #1
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061e4:	4931      	ldr	r1, [pc, #196]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061ea:	4b30      	ldr	r3, [pc, #192]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	492d      	ldr	r1, [pc, #180]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061fc:	4b2b      	ldr	r3, [pc, #172]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	f023 0220 	bic.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	4928      	ldr	r1, [pc, #160]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 800620a:	4313      	orrs	r3, r2
 800620c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800620e:	4b27      	ldr	r3, [pc, #156]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	4a26      	ldr	r2, [pc, #152]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800621a:	4b24      	ldr	r3, [pc, #144]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 800621c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800621e:	4b24      	ldr	r3, [pc, #144]	@ (80062b0 <RCCEx_PLL2_Config+0x160>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	69d2      	ldr	r2, [r2, #28]
 8006226:	00d2      	lsls	r2, r2, #3
 8006228:	4920      	ldr	r1, [pc, #128]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800622e:	4b1f      	ldr	r3, [pc, #124]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	4a1e      	ldr	r2, [pc, #120]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006234:	f043 0310 	orr.w	r3, r3, #16
 8006238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006240:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a19      	ldr	r2, [pc, #100]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800624c:	e00f      	b.n	800626e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006254:	4b15      	ldr	r3, [pc, #84]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	4a14      	ldr	r2, [pc, #80]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006260:	e005      	b.n	800626e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006262:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	4a11      	ldr	r2, [pc, #68]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800626c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800626e:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0e      	ldr	r2, [pc, #56]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627a:	f7fb fb93 	bl	80019a4 <HAL_GetTick>
 800627e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	e008      	b.n	8006294 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006282:	f7fb fb8f 	bl	80019a4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e006      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	58024400 	.word	0x58024400
 80062b0:	ffff0007 	.word	0xffff0007

080062b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062c2:	4b53      	ldr	r3, [pc, #332]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d101      	bne.n	80062d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e099      	b.n	8006406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062de:	f7fb fb61 	bl	80019a4 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062e6:	f7fb fb5d 	bl	80019a4 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e086      	b.n	8006406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062f8:	4b45      	ldr	r3, [pc, #276]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006304:	4b42      	ldr	r3, [pc, #264]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	051b      	lsls	r3, r3, #20
 8006312:	493f      	ldr	r1, [pc, #252]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006314:	4313      	orrs	r3, r2
 8006316:	628b      	str	r3, [r1, #40]	@ 0x28
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	3b01      	subs	r3, #1
 8006328:	025b      	lsls	r3, r3, #9
 800632a:	b29b      	uxth	r3, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	3b01      	subs	r3, #1
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006348:	4931      	ldr	r1, [pc, #196]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800634e:	4b30      	ldr	r3, [pc, #192]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	492d      	ldr	r1, [pc, #180]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006360:	4b2b      	ldr	r3, [pc, #172]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	4928      	ldr	r1, [pc, #160]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006372:	4b27      	ldr	r3, [pc, #156]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	4a26      	ldr	r2, [pc, #152]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800637c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800637e:	4b24      	ldr	r3, [pc, #144]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006382:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <RCCEx_PLL3_Config+0x160>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	69d2      	ldr	r2, [r2, #28]
 800638a:	00d2      	lsls	r2, r2, #3
 800638c:	4920      	ldr	r1, [pc, #128]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006392:	4b1f      	ldr	r3, [pc, #124]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	4a1e      	ldr	r2, [pc, #120]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b0:	e00f      	b.n	80063d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063b8:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063bc:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063c4:	e005      	b.n	80063d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	4a11      	ldr	r2, [pc, #68]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fb fae1 	bl	80019a4 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	e008      	b.n	80063f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063e6:	f7fb fadd 	bl	80019a4 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e006      	b.n	8006406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063f8:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
 8006414:	ffff0007 	.word	0xffff0007

08006418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d071      	beq.n	800650e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb f8bc 	bl	80015bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b10      	cmp	r3, #16
 8006458:	d050      	beq.n	80064fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	22ca      	movs	r2, #202	@ 0xca
 8006460:	625a      	str	r2, [r3, #36]	@ 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2253      	movs	r2, #83	@ 0x53
 8006468:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa4a 	bl	8006904 <RTC_EnterInitMode>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d124      	bne.n	80064c4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b24      	ldr	r3, [pc, #144]	@ (8006518 <HAL_RTC_Init+0x100>)
 8006486:	400b      	ands	r3, r1
 8006488:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6899      	ldr	r1, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	0419      	lsls	r1, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa56 	bl	800696c <RTC_ExitInitMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d113      	bne.n	80064f2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0203 	bic.w	r2, r2, #3
 80064d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	22ff      	movs	r2, #255	@ 0xff
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80064fa:	e001      	b.n	8006500 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	ff8fffbf 	.word	0xff8fffbf

0800651c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_RTC_SetTime+0x1a>
 8006532:	2302      	movs	r3, #2
 8006534:	e089      	b.n	800664a <HAL_RTC_SetTime+0x12e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	22ca      	movs	r2, #202	@ 0xca
 800654c:	625a      	str	r2, [r3, #36]	@ 0x24
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2253      	movs	r2, #83	@ 0x53
 8006554:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f9d4 	bl	8006904 <RTC_EnterInitMode>
 800655c:	4603      	mov	r3, r0
 800655e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d161      	bne.n	800662a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d126      	bne.n	80065ba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fa2f 	bl	80069e8 <RTC_ByteToBcd2>
 800658a:	4603      	mov	r3, r0
 800658c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fa28 	bl	80069e8 <RTC_ByteToBcd2>
 8006598:	4603      	mov	r3, r0
 800659a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800659c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	789b      	ldrb	r3, [r3, #2]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fa20 	bl	80069e8 <RTC_ByteToBcd2>
 80065a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	78db      	ldrb	r3, [r3, #3]
 80065b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e018      	b.n	80065ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	78db      	ldrb	r3, [r3, #3]
 80065e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	6979      	ldr	r1, [r7, #20]
 80065f2:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <HAL_RTC_SetTime+0x138>)
 80065f4:	400b      	ands	r3, r1
 80065f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006606:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f9a3 	bl	800696c <RTC_ExitInitMode>
 8006626:	4603      	mov	r3, r0
 8006628:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	22ff      	movs	r2, #255	@ 0xff
 8006630:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006632:	7cfb      	ldrb	r3, [r7, #19]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006648:	7cfb      	ldrb	r3, [r7, #19]
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	007f7f7f 	.word	0x007f7f7f

08006658 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b22      	ldr	r3, [pc, #136]	@ (800670c <HAL_RTC_GetTime+0xb4>)
 8006684:	4013      	ands	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	0d9b      	lsrs	r3, r3, #22
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11a      	bne.n	8006702 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f9a9 	bl	8006a28 <RTC_Bcd2ToByte>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f9a0 	bl	8006a28 <RTC_Bcd2ToByte>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	789b      	ldrb	r3, [r3, #2]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 f997 	bl	8006a28 <RTC_Bcd2ToByte>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	007f7f7f 	.word	0x007f7f7f

08006710 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006710:	b590      	push	{r4, r7, lr}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_RTC_SetDate+0x1a>
 8006726:	2302      	movs	r3, #2
 8006728:	e073      	b.n	8006812 <HAL_RTC_SetDate+0x102>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10e      	bne.n	800675e <HAL_RTC_SetDate+0x4e>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	b2db      	uxtb	r3, r3
 8006756:	330a      	adds	r3, #10
 8006758:	b2da      	uxtb	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11c      	bne.n	800679e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	78db      	ldrb	r3, [r3, #3]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 f93d 	bl	80069e8 <RTC_ByteToBcd2>
 800676e:	4603      	mov	r3, r0
 8006770:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f936 	bl	80069e8 <RTC_ByteToBcd2>
 800677c:	4603      	mov	r3, r0
 800677e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006780:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	789b      	ldrb	r3, [r3, #2]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f92e 	bl	80069e8 <RTC_ByteToBcd2>
 800678c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800678e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e00e      	b.n	80067bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80067aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80067b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	22ca      	movs	r2, #202	@ 0xca
 80067c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2253      	movs	r2, #83	@ 0x53
 80067ca:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f899 	bl	8006904 <RTC_EnterInitMode>
 80067d2:	4603      	mov	r3, r0
 80067d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80067d6:	7cfb      	ldrb	r3, [r7, #19]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	4b0e      	ldr	r3, [pc, #56]	@ (800681c <HAL_RTC_SetDate+0x10c>)
 80067e4:	400b      	ands	r3, r1
 80067e6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f8bf 	bl	800696c <RTC_ExitInitMode>
 80067ee:	4603      	mov	r3, r0
 80067f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	22ff      	movs	r2, #255	@ 0xff
 80067f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006810:	7cfb      	ldrb	r3, [r7, #19]


}
 8006812:	4618      	mov	r0, r3
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd90      	pop	{r4, r7, pc}
 800681a:	bf00      	nop
 800681c:	00ffff3f 	.word	0x00ffff3f

08006820 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b21      	ldr	r3, [pc, #132]	@ (80068b8 <HAL_RTC_GetDate+0x98>)
 8006834:	4013      	ands	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	0a1b      	lsrs	r3, r3, #8
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	0b5b      	lsrs	r3, r3, #13
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	b2da      	uxtb	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11a      	bne.n	80068ac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	78db      	ldrb	r3, [r3, #3]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f8d4 	bl	8006a28 <RTC_Bcd2ToByte>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f8cb 	bl	8006a28 <RTC_Bcd2ToByte>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8c2 	bl	8006a28 <RTC_Bcd2ToByte>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	00ffff3f 	.word	0x00ffff3f

080068bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <HAL_RTC_WaitForSynchro+0x44>)
 80068ca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80068cc:	f7fb f86a 	bl	80019a4 <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068d2:	e009      	b.n	80068e8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068d4:	f7fb f866 	bl	80019a4 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068e2:	d901      	bls.n	80068e8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e007      	b.n	80068f8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0ee      	beq.n	80068d4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	0003ff5f 	.word	0x0003ff5f

08006904 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d120      	bne.n	8006960 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006928:	f7fb f83c 	bl	80019a4 <HAL_GetTick>
 800692c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800692e:	e00d      	b.n	800694c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006930:	f7fb f838 	bl	80019a4 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800693e:	d905      	bls.n	800694c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2203      	movs	r2, #3
 8006948:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <RTC_EnterInitMode+0x5c>
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d1e7      	bne.n	8006930 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006978:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 800697e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006982:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006984:	4b17      	ldr	r3, [pc, #92]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10c      	bne.n	80069aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff93 	bl	80068bc <HAL_RTC_WaitForSynchro>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2203      	movs	r2, #3
 80069a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e017      	b.n	80069da <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069aa:	4b0e      	ldr	r3, [pc, #56]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	4a0d      	ldr	r2, [pc, #52]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff80 	bl	80068bc <HAL_RTC_WaitForSynchro>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ce:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	4a04      	ldr	r2, [pc, #16]	@ (80069e4 <RTC_ExitInitMode+0x78>)
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	58004000 	.word	0x58004000

080069e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80069fa:	e005      	b.n	8006a08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	3b0a      	subs	r3, #10
 8006a06:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	2b09      	cmp	r3, #9
 8006a0c:	d8f6      	bhi.n	80069fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b2db      	uxtb	r3, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	b2db      	uxtb	r3, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e042      	b.n	8006af4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fa fdcd 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2224      	movs	r2, #36	@ 0x24
 8006a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 f9f8 	bl	8007e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc8d 	bl	80073cc <UART_SetConfig>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e01b      	b.n	8006af4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fa77 	bl	8007fe0 <UART_CheckIdleState>
 8006af2:	4603      	mov	r3, r0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	@ 0x28
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d17b      	bne.n	8006c0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_UART_Transmit+0x26>
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e074      	b.n	8006c10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2221      	movs	r2, #33	@ 0x21
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b36:	f7fa ff35 	bl	80019a4 <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b54:	d108      	bne.n	8006b68 <HAL_UART_Transmit+0x6c>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e003      	b.n	8006b70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b70:	e030      	b.n	8006bd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	@ 0x80
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f001 fad9 	bl	8008134 <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e03d      	b.n	8006c10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	3302      	adds	r3, #2
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e007      	b.n	8006bc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1c8      	bne.n	8006b72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2200      	movs	r2, #0
 8006be8:	2140      	movs	r1, #64	@ 0x40
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f001 faa2 	bl	8008134 <UART_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e006      	b.n	8006c10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e000      	b.n	8006c10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c46:	4013      	ands	r3, r2
 8006c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11b      	bne.n	8006c8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d015      	beq.n	8006c8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8377 	beq.w	8007370 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
      }
      return;
 8006c8a:	e371      	b.n	8007370 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8123 	beq.w	8006edc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed0 <HAL_UART_IRQHandler+0x2b8>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ca2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ed4 <HAL_UART_IRQHandler+0x2bc>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8116 	beq.w	8006edc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d011      	beq.n	8006ce0 <HAL_UART_IRQHandler+0xc8>
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd6:	f043 0201 	orr.w	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d011      	beq.n	8006d10 <HAL_UART_IRQHandler+0xf8>
 8006cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d011      	beq.n	8006d40 <HAL_UART_IRQHandler+0x128>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d36:	f043 0202 	orr.w	r2, r3, #2
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d017      	beq.n	8006d7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed0 <HAL_UART_IRQHandler+0x2b8>)
 8006d5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	f043 0208 	orr.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d012      	beq.n	8006dae <HAL_UART_IRQHandler+0x196>
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da4:	f043 0220 	orr.w	r2, r3, #32
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 82dd 	beq.w	8007374 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d013      	beq.n	8006dee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d105      	bne.n	8006dde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	d005      	beq.n	8006e12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d054      	beq.n	8006ebc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f9fc 	bl	8008210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	d146      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1d9      	bne.n	8006e26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d017      	beq.n	8006eac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e82:	4a15      	ldr	r2, [pc, #84]	@ (8006ed8 <HAL_UART_IRQHandler+0x2c0>)
 8006e84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fb f9fd 	bl	800228c <HAL_DMA_Abort_IT>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d019      	beq.n	8006ecc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eaa:	e00f      	b.n	8006ecc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fa77 	bl	80073a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	e00b      	b.n	8006ecc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa73 	bl	80073a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e007      	b.n	8006ecc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fa6f 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006eca:	e253      	b.n	8007374 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	bf00      	nop
    return;
 8006ece:	e251      	b.n	8007374 <HAL_UART_IRQHandler+0x75c>
 8006ed0:	10000001 	.word	0x10000001
 8006ed4:	04000120 	.word	0x04000120
 8006ed8:	080082dd 	.word	0x080082dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f040 81e7 	bne.w	80072b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 81e0 	beq.w	80072b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 81d9 	beq.w	80072b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2210      	movs	r2, #16
 8006f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f14:	2b40      	cmp	r3, #64	@ 0x40
 8006f16:	f040 8151 	bne.w	80071bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a96      	ldr	r2, [pc, #600]	@ (800717c <HAL_UART_IRQHandler+0x564>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d068      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a93      	ldr	r2, [pc, #588]	@ (8007180 <HAL_UART_IRQHandler+0x568>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d061      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a91      	ldr	r2, [pc, #580]	@ (8007184 <HAL_UART_IRQHandler+0x56c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d05a      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8007188 <HAL_UART_IRQHandler+0x570>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d053      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a8c      	ldr	r2, [pc, #560]	@ (800718c <HAL_UART_IRQHandler+0x574>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d04c      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a89      	ldr	r2, [pc, #548]	@ (8007190 <HAL_UART_IRQHandler+0x578>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d045      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a87      	ldr	r2, [pc, #540]	@ (8007194 <HAL_UART_IRQHandler+0x57c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d03e      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a84      	ldr	r2, [pc, #528]	@ (8007198 <HAL_UART_IRQHandler+0x580>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d037      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a82      	ldr	r2, [pc, #520]	@ (800719c <HAL_UART_IRQHandler+0x584>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d030      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7f      	ldr	r2, [pc, #508]	@ (80071a0 <HAL_UART_IRQHandler+0x588>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d029      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a7d      	ldr	r2, [pc, #500]	@ (80071a4 <HAL_UART_IRQHandler+0x58c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d022      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80071a8 <HAL_UART_IRQHandler+0x590>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01b      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a78      	ldr	r2, [pc, #480]	@ (80071ac <HAL_UART_IRQHandler+0x594>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d014      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a75      	ldr	r2, [pc, #468]	@ (80071b0 <HAL_UART_IRQHandler+0x598>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00d      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a73      	ldr	r2, [pc, #460]	@ (80071b4 <HAL_UART_IRQHandler+0x59c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d006      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3e2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a70      	ldr	r2, [pc, #448]	@ (80071b8 <HAL_UART_IRQHandler+0x5a0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d106      	bne.n	8007008 <HAL_UART_IRQHandler+0x3f0>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b29b      	uxth	r3, r3
 8007006:	e005      	b.n	8007014 <HAL_UART_IRQHandler+0x3fc>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 81ab 	beq.w	8007378 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800702c:	429a      	cmp	r2, r3
 800702e:	f080 81a3 	bcs.w	8007378 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007038:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007048:	f000 8087 	beq.w	800715a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800707a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007082:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800708e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1da      	bne.n	800704c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e1      	bne.n	8007096 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e3      	bne.n	80070d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007128:	f023 0310 	bic.w	r3, r3, #16
 800712c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800713a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800713c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e4      	bne.n	8007118 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007154:	4618      	mov	r0, r3
 8007156:	f7fa fd7b 	bl	8001c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800716c:	b29b      	uxth	r3, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	b29b      	uxth	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f91d 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800717a:	e0fd      	b.n	8007378 <HAL_UART_IRQHandler+0x760>
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80cf 	beq.w	800737c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80071de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80ca 	beq.w	800737c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800720a:	647b      	str	r3, [r7, #68]	@ 0x44
 800720c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e4      	bne.n	80071e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	623b      	str	r3, [r7, #32]
   return(result);
 800722e:	6a3a      	ldr	r2, [r7, #32]
 8007230:	4b55      	ldr	r3, [pc, #340]	@ (8007388 <HAL_UART_IRQHandler+0x770>)
 8007232:	4013      	ands	r3, r2
 8007234:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007242:	633a      	str	r2, [r7, #48]	@ 0x30
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60fb      	str	r3, [r7, #12]
   return(result);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	617b      	str	r3, [r7, #20]
   return(result);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e4      	bne.n	800726a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f881 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072b2:	e063      	b.n	800737c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00e      	beq.n	80072de <HAL_UART_IRQHandler+0x6c6>
 80072c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 f841 	bl	800835e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072dc:	e051      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d105      	bne.n	8007302 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007306:	2b00      	cmp	r3, #0
 8007308:	d03a      	beq.n	8007380 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
    }
    return;
 8007312:	e035      	b.n	8007380 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_UART_IRQHandler+0x71c>
 8007320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 ffeb 	bl	8008308 <UART_EndTransmit_IT>
    return;
 8007332:	e026      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <HAL_UART_IRQHandler+0x73c>
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007344:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f81a 	bl	8008386 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007352:	e016      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_UART_IRQHandler+0x76a>
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007364:	2b00      	cmp	r3, #0
 8007366:	da0c      	bge.n	8007382 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f802 	bl	8008372 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800736e:	e008      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
      return;
 8007370:	bf00      	nop
 8007372:	e006      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
    return;
 8007374:	bf00      	nop
 8007376:	e004      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
      return;
 8007378:	bf00      	nop
 800737a:	e002      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
      return;
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <HAL_UART_IRQHandler+0x76a>
    return;
 8007380:	bf00      	nop
  }
}
 8007382:	37e8      	adds	r7, #232	@ 0xe8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	effffffe 	.word	0xeffffffe

0800738c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d0:	b092      	sub	sp, #72	@ 0x48
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4bbe      	ldr	r3, [pc, #760]	@ (80076f4 <UART_SetConfig+0x328>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007404:	430b      	orrs	r3, r1
 8007406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4ab3      	ldr	r2, [pc, #716]	@ (80076f8 <UART_SetConfig+0x32c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007434:	4313      	orrs	r3, r2
 8007436:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	4baf      	ldr	r3, [pc, #700]	@ (80076fc <UART_SetConfig+0x330>)
 8007440:	4013      	ands	r3, r2
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007448:	430b      	orrs	r3, r1
 800744a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	f023 010f 	bic.w	r1, r3, #15
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4aa6      	ldr	r2, [pc, #664]	@ (8007700 <UART_SetConfig+0x334>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d177      	bne.n	800755c <UART_SetConfig+0x190>
 800746c:	4ba5      	ldr	r3, [pc, #660]	@ (8007704 <UART_SetConfig+0x338>)
 800746e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007474:	2b28      	cmp	r3, #40	@ 0x28
 8007476:	d86d      	bhi.n	8007554 <UART_SetConfig+0x188>
 8007478:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <UART_SetConfig+0xb4>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	08007525 	.word	0x08007525
 8007484:	08007555 	.word	0x08007555
 8007488:	08007555 	.word	0x08007555
 800748c:	08007555 	.word	0x08007555
 8007490:	08007555 	.word	0x08007555
 8007494:	08007555 	.word	0x08007555
 8007498:	08007555 	.word	0x08007555
 800749c:	08007555 	.word	0x08007555
 80074a0:	0800752d 	.word	0x0800752d
 80074a4:	08007555 	.word	0x08007555
 80074a8:	08007555 	.word	0x08007555
 80074ac:	08007555 	.word	0x08007555
 80074b0:	08007555 	.word	0x08007555
 80074b4:	08007555 	.word	0x08007555
 80074b8:	08007555 	.word	0x08007555
 80074bc:	08007555 	.word	0x08007555
 80074c0:	08007535 	.word	0x08007535
 80074c4:	08007555 	.word	0x08007555
 80074c8:	08007555 	.word	0x08007555
 80074cc:	08007555 	.word	0x08007555
 80074d0:	08007555 	.word	0x08007555
 80074d4:	08007555 	.word	0x08007555
 80074d8:	08007555 	.word	0x08007555
 80074dc:	08007555 	.word	0x08007555
 80074e0:	0800753d 	.word	0x0800753d
 80074e4:	08007555 	.word	0x08007555
 80074e8:	08007555 	.word	0x08007555
 80074ec:	08007555 	.word	0x08007555
 80074f0:	08007555 	.word	0x08007555
 80074f4:	08007555 	.word	0x08007555
 80074f8:	08007555 	.word	0x08007555
 80074fc:	08007555 	.word	0x08007555
 8007500:	08007545 	.word	0x08007545
 8007504:	08007555 	.word	0x08007555
 8007508:	08007555 	.word	0x08007555
 800750c:	08007555 	.word	0x08007555
 8007510:	08007555 	.word	0x08007555
 8007514:	08007555 	.word	0x08007555
 8007518:	08007555 	.word	0x08007555
 800751c:	08007555 	.word	0x08007555
 8007520:	0800754d 	.word	0x0800754d
 8007524:	2301      	movs	r3, #1
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e222      	b.n	8007972 <UART_SetConfig+0x5a6>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e21e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e21a      	b.n	8007972 <UART_SetConfig+0x5a6>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e216      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007544:	2320      	movs	r3, #32
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e212      	b.n	8007972 <UART_SetConfig+0x5a6>
 800754c:	2340      	movs	r3, #64	@ 0x40
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e20e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007554:	2380      	movs	r3, #128	@ 0x80
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e20a      	b.n	8007972 <UART_SetConfig+0x5a6>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a69      	ldr	r2, [pc, #420]	@ (8007708 <UART_SetConfig+0x33c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d130      	bne.n	80075c8 <UART_SetConfig+0x1fc>
 8007566:	4b67      	ldr	r3, [pc, #412]	@ (8007704 <UART_SetConfig+0x338>)
 8007568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b05      	cmp	r3, #5
 8007570:	d826      	bhi.n	80075c0 <UART_SetConfig+0x1f4>
 8007572:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <UART_SetConfig+0x1ac>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007591 	.word	0x08007591
 800757c:	08007599 	.word	0x08007599
 8007580:	080075a1 	.word	0x080075a1
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b9 	.word	0x080075b9
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e1ec      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e1e8      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e1e4      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e1e0      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075b0:	2320      	movs	r3, #32
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e1dc      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075b8:	2340      	movs	r3, #64	@ 0x40
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e1d8      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075c0:	2380      	movs	r3, #128	@ 0x80
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e1d4      	b.n	8007972 <UART_SetConfig+0x5a6>
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a4f      	ldr	r2, [pc, #316]	@ (800770c <UART_SetConfig+0x340>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d130      	bne.n	8007634 <UART_SetConfig+0x268>
 80075d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007704 <UART_SetConfig+0x338>)
 80075d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d826      	bhi.n	800762c <UART_SetConfig+0x260>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <UART_SetConfig+0x218>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	080075fd 	.word	0x080075fd
 80075e8:	08007605 	.word	0x08007605
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800761d 	.word	0x0800761d
 80075f8:	08007625 	.word	0x08007625
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e1b6      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007604:	2304      	movs	r3, #4
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e1b2      	b.n	8007972 <UART_SetConfig+0x5a6>
 800760c:	2308      	movs	r3, #8
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e1ae      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007614:	2310      	movs	r3, #16
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1aa      	b.n	8007972 <UART_SetConfig+0x5a6>
 800761c:	2320      	movs	r3, #32
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e1a6      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007624:	2340      	movs	r3, #64	@ 0x40
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1a2      	b.n	8007972 <UART_SetConfig+0x5a6>
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e19e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <UART_SetConfig+0x344>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d130      	bne.n	80076a0 <UART_SetConfig+0x2d4>
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <UART_SetConfig+0x338>)
 8007640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	2b05      	cmp	r3, #5
 8007648:	d826      	bhi.n	8007698 <UART_SetConfig+0x2cc>
 800764a:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0x284>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007669 	.word	0x08007669
 8007654:	08007671 	.word	0x08007671
 8007658:	08007679 	.word	0x08007679
 800765c:	08007681 	.word	0x08007681
 8007660:	08007689 	.word	0x08007689
 8007664:	08007691 	.word	0x08007691
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e180      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007670:	2304      	movs	r3, #4
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e17c      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007678:	2308      	movs	r3, #8
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e178      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007680:	2310      	movs	r3, #16
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e174      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007688:	2320      	movs	r3, #32
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e170      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007690:	2340      	movs	r3, #64	@ 0x40
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e16c      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007698:	2380      	movs	r3, #128	@ 0x80
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e168      	b.n	8007972 <UART_SetConfig+0x5a6>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <UART_SetConfig+0x348>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d142      	bne.n	8007730 <UART_SetConfig+0x364>
 80076aa:	4b16      	ldr	r3, [pc, #88]	@ (8007704 <UART_SetConfig+0x338>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d838      	bhi.n	8007728 <UART_SetConfig+0x35c>
 80076b6:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <UART_SetConfig+0x2f0>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076d5 	.word	0x080076d5
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	080076e5 	.word	0x080076e5
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	08007719 	.word	0x08007719
 80076d0:	08007721 	.word	0x08007721
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e14a      	b.n	8007972 <UART_SetConfig+0x5a6>
 80076dc:	2304      	movs	r3, #4
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e146      	b.n	8007972 <UART_SetConfig+0x5a6>
 80076e4:	2308      	movs	r3, #8
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e142      	b.n	8007972 <UART_SetConfig+0x5a6>
 80076ec:	2310      	movs	r3, #16
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e13e      	b.n	8007972 <UART_SetConfig+0x5a6>
 80076f4:	cfff69f3 	.word	0xcfff69f3
 80076f8:	58000c00 	.word	0x58000c00
 80076fc:	11fff4ff 	.word	0x11fff4ff
 8007700:	40011000 	.word	0x40011000
 8007704:	58024400 	.word	0x58024400
 8007708:	40004400 	.word	0x40004400
 800770c:	40004800 	.word	0x40004800
 8007710:	40004c00 	.word	0x40004c00
 8007714:	40005000 	.word	0x40005000
 8007718:	2320      	movs	r3, #32
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e128      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007720:	2340      	movs	r3, #64	@ 0x40
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e124      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007728:	2380      	movs	r3, #128	@ 0x80
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e120      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4acb      	ldr	r2, [pc, #812]	@ (8007a64 <UART_SetConfig+0x698>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d176      	bne.n	8007828 <UART_SetConfig+0x45c>
 800773a:	4bcb      	ldr	r3, [pc, #812]	@ (8007a68 <UART_SetConfig+0x69c>)
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007742:	2b28      	cmp	r3, #40	@ 0x28
 8007744:	d86c      	bhi.n	8007820 <UART_SetConfig+0x454>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <UART_SetConfig+0x380>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	080077f1 	.word	0x080077f1
 8007750:	08007821 	.word	0x08007821
 8007754:	08007821 	.word	0x08007821
 8007758:	08007821 	.word	0x08007821
 800775c:	08007821 	.word	0x08007821
 8007760:	08007821 	.word	0x08007821
 8007764:	08007821 	.word	0x08007821
 8007768:	08007821 	.word	0x08007821
 800776c:	080077f9 	.word	0x080077f9
 8007770:	08007821 	.word	0x08007821
 8007774:	08007821 	.word	0x08007821
 8007778:	08007821 	.word	0x08007821
 800777c:	08007821 	.word	0x08007821
 8007780:	08007821 	.word	0x08007821
 8007784:	08007821 	.word	0x08007821
 8007788:	08007821 	.word	0x08007821
 800778c:	08007801 	.word	0x08007801
 8007790:	08007821 	.word	0x08007821
 8007794:	08007821 	.word	0x08007821
 8007798:	08007821 	.word	0x08007821
 800779c:	08007821 	.word	0x08007821
 80077a0:	08007821 	.word	0x08007821
 80077a4:	08007821 	.word	0x08007821
 80077a8:	08007821 	.word	0x08007821
 80077ac:	08007809 	.word	0x08007809
 80077b0:	08007821 	.word	0x08007821
 80077b4:	08007821 	.word	0x08007821
 80077b8:	08007821 	.word	0x08007821
 80077bc:	08007821 	.word	0x08007821
 80077c0:	08007821 	.word	0x08007821
 80077c4:	08007821 	.word	0x08007821
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007811 	.word	0x08007811
 80077d0:	08007821 	.word	0x08007821
 80077d4:	08007821 	.word	0x08007821
 80077d8:	08007821 	.word	0x08007821
 80077dc:	08007821 	.word	0x08007821
 80077e0:	08007821 	.word	0x08007821
 80077e4:	08007821 	.word	0x08007821
 80077e8:	08007821 	.word	0x08007821
 80077ec:	08007819 	.word	0x08007819
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e0bc      	b.n	8007972 <UART_SetConfig+0x5a6>
 80077f8:	2304      	movs	r3, #4
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e0b8      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007800:	2308      	movs	r3, #8
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e0b4      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007808:	2310      	movs	r3, #16
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e0b0      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007810:	2320      	movs	r3, #32
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e0ac      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007818:	2340      	movs	r3, #64	@ 0x40
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e0a8      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e0a4      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a8f      	ldr	r2, [pc, #572]	@ (8007a6c <UART_SetConfig+0x6a0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d130      	bne.n	8007894 <UART_SetConfig+0x4c8>
 8007832:	4b8d      	ldr	r3, [pc, #564]	@ (8007a68 <UART_SetConfig+0x69c>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b05      	cmp	r3, #5
 800783c:	d826      	bhi.n	800788c <UART_SetConfig+0x4c0>
 800783e:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <UART_SetConfig+0x478>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	0800785d 	.word	0x0800785d
 8007848:	08007865 	.word	0x08007865
 800784c:	0800786d 	.word	0x0800786d
 8007850:	08007875 	.word	0x08007875
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007885 	.word	0x08007885
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e086      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007864:	2304      	movs	r3, #4
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e082      	b.n	8007972 <UART_SetConfig+0x5a6>
 800786c:	2308      	movs	r3, #8
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e07e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e07a      	b.n	8007972 <UART_SetConfig+0x5a6>
 800787c:	2320      	movs	r3, #32
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e076      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007884:	2340      	movs	r3, #64	@ 0x40
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e072      	b.n	8007972 <UART_SetConfig+0x5a6>
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e06e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a75      	ldr	r2, [pc, #468]	@ (8007a70 <UART_SetConfig+0x6a4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d130      	bne.n	8007900 <UART_SetConfig+0x534>
 800789e:	4b72      	ldr	r3, [pc, #456]	@ (8007a68 <UART_SetConfig+0x69c>)
 80078a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b05      	cmp	r3, #5
 80078a8:	d826      	bhi.n	80078f8 <UART_SetConfig+0x52c>
 80078aa:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <UART_SetConfig+0x4e4>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078c9 	.word	0x080078c9
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	080078e1 	.word	0x080078e1
 80078c0:	080078e9 	.word	0x080078e9
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e050      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e04c      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e048      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e044      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078e8:	2320      	movs	r3, #32
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e040      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078f0:	2340      	movs	r3, #64	@ 0x40
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e03c      	b.n	8007972 <UART_SetConfig+0x5a6>
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e038      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5b      	ldr	r2, [pc, #364]	@ (8007a74 <UART_SetConfig+0x6a8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d130      	bne.n	800796c <UART_SetConfig+0x5a0>
 800790a:	4b57      	ldr	r3, [pc, #348]	@ (8007a68 <UART_SetConfig+0x69c>)
 800790c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	2b05      	cmp	r3, #5
 8007914:	d826      	bhi.n	8007964 <UART_SetConfig+0x598>
 8007916:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <UART_SetConfig+0x550>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007935 	.word	0x08007935
 8007920:	0800793d 	.word	0x0800793d
 8007924:	08007945 	.word	0x08007945
 8007928:	0800794d 	.word	0x0800794d
 800792c:	08007955 	.word	0x08007955
 8007930:	0800795d 	.word	0x0800795d
 8007934:	2302      	movs	r3, #2
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e01a      	b.n	8007972 <UART_SetConfig+0x5a6>
 800793c:	2304      	movs	r3, #4
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e016      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007944:	2308      	movs	r3, #8
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e012      	b.n	8007972 <UART_SetConfig+0x5a6>
 800794c:	2310      	movs	r3, #16
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e00e      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007954:	2320      	movs	r3, #32
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e00a      	b.n	8007972 <UART_SetConfig+0x5a6>
 800795c:	2340      	movs	r3, #64	@ 0x40
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e006      	b.n	8007972 <UART_SetConfig+0x5a6>
 8007964:	2380      	movs	r3, #128	@ 0x80
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e002      	b.n	8007972 <UART_SetConfig+0x5a6>
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a3f      	ldr	r2, [pc, #252]	@ (8007a74 <UART_SetConfig+0x6a8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	f040 80f8 	bne.w	8007b6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800797e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007982:	2b20      	cmp	r3, #32
 8007984:	dc46      	bgt.n	8007a14 <UART_SetConfig+0x648>
 8007986:	2b02      	cmp	r3, #2
 8007988:	f2c0 8082 	blt.w	8007a90 <UART_SetConfig+0x6c4>
 800798c:	3b02      	subs	r3, #2
 800798e:	2b1e      	cmp	r3, #30
 8007990:	d87e      	bhi.n	8007a90 <UART_SetConfig+0x6c4>
 8007992:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <UART_SetConfig+0x5cc>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	08007a1b 	.word	0x08007a1b
 800799c:	08007a91 	.word	0x08007a91
 80079a0:	08007a23 	.word	0x08007a23
 80079a4:	08007a91 	.word	0x08007a91
 80079a8:	08007a91 	.word	0x08007a91
 80079ac:	08007a91 	.word	0x08007a91
 80079b0:	08007a33 	.word	0x08007a33
 80079b4:	08007a91 	.word	0x08007a91
 80079b8:	08007a91 	.word	0x08007a91
 80079bc:	08007a91 	.word	0x08007a91
 80079c0:	08007a91 	.word	0x08007a91
 80079c4:	08007a91 	.word	0x08007a91
 80079c8:	08007a91 	.word	0x08007a91
 80079cc:	08007a91 	.word	0x08007a91
 80079d0:	08007a43 	.word	0x08007a43
 80079d4:	08007a91 	.word	0x08007a91
 80079d8:	08007a91 	.word	0x08007a91
 80079dc:	08007a91 	.word	0x08007a91
 80079e0:	08007a91 	.word	0x08007a91
 80079e4:	08007a91 	.word	0x08007a91
 80079e8:	08007a91 	.word	0x08007a91
 80079ec:	08007a91 	.word	0x08007a91
 80079f0:	08007a91 	.word	0x08007a91
 80079f4:	08007a91 	.word	0x08007a91
 80079f8:	08007a91 	.word	0x08007a91
 80079fc:	08007a91 	.word	0x08007a91
 8007a00:	08007a91 	.word	0x08007a91
 8007a04:	08007a91 	.word	0x08007a91
 8007a08:	08007a91 	.word	0x08007a91
 8007a0c:	08007a91 	.word	0x08007a91
 8007a10:	08007a83 	.word	0x08007a83
 8007a14:	2b40      	cmp	r3, #64	@ 0x40
 8007a16:	d037      	beq.n	8007a88 <UART_SetConfig+0x6bc>
 8007a18:	e03a      	b.n	8007a90 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a1a:	f7fe f8db 	bl	8005bd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a20:	e03c      	b.n	8007a9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe f8ea 	bl	8005c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a30:	e034      	b.n	8007a9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a32:	f107 0318 	add.w	r3, r7, #24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fa36 	bl	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a40:	e02c      	b.n	8007a9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a42:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <UART_SetConfig+0x69c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a4e:	4b06      	ldr	r3, [pc, #24]	@ (8007a68 <UART_SetConfig+0x69c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	4a07      	ldr	r2, [pc, #28]	@ (8007a78 <UART_SetConfig+0x6ac>)
 8007a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a60:	e01c      	b.n	8007a9c <UART_SetConfig+0x6d0>
 8007a62:	bf00      	nop
 8007a64:	40011400 	.word	0x40011400
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	40007800 	.word	0x40007800
 8007a70:	40007c00 	.word	0x40007c00
 8007a74:	58000c00 	.word	0x58000c00
 8007a78:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a7c:	4b9d      	ldr	r3, [pc, #628]	@ (8007cf4 <UART_SetConfig+0x928>)
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e00c      	b.n	8007a9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a82:	4b9d      	ldr	r3, [pc, #628]	@ (8007cf8 <UART_SetConfig+0x92c>)
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a86:	e009      	b.n	8007a9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8e:	e005      	b.n	8007a9c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 81de 	beq.w	8007e60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	4a94      	ldr	r2, [pc, #592]	@ (8007cfc <UART_SetConfig+0x930>)
 8007aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d305      	bcc.n	8007ad4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ada:	e1c1      	b.n	8007e60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ade:	2200      	movs	r2, #0
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	60fa      	str	r2, [r7, #12]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	4a84      	ldr	r2, [pc, #528]	@ (8007cfc <UART_SetConfig+0x930>)
 8007aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2200      	movs	r2, #0
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007afe:	f7f8 fc3f 	bl	8000380 <__aeabi_uldivmod>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	020b      	lsls	r3, r1, #8
 8007b14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b18:	0202      	lsls	r2, r0, #8
 8007b1a:	6979      	ldr	r1, [r7, #20]
 8007b1c:	6849      	ldr	r1, [r1, #4]
 8007b1e:	0849      	lsrs	r1, r1, #1
 8007b20:	2000      	movs	r0, #0
 8007b22:	460c      	mov	r4, r1
 8007b24:	4605      	mov	r5, r0
 8007b26:	eb12 0804 	adds.w	r8, r2, r4
 8007b2a:	eb43 0905 	adc.w	r9, r3, r5
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	469a      	mov	sl, r3
 8007b36:	4693      	mov	fp, r2
 8007b38:	4652      	mov	r2, sl
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 fc1e 	bl	8000380 <__aeabi_uldivmod>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4613      	mov	r3, r2
 8007b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b52:	d308      	bcc.n	8007b66 <UART_SetConfig+0x79a>
 8007b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b5a:	d204      	bcs.n	8007b66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e17c      	b.n	8007e60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b6c:	e178      	b.n	8007e60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b76:	f040 80c5 	bne.w	8007d04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	dc48      	bgt.n	8007c14 <UART_SetConfig+0x848>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	db7b      	blt.n	8007c7e <UART_SetConfig+0x8b2>
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d879      	bhi.n	8007c7e <UART_SetConfig+0x8b2>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <UART_SetConfig+0x7c4>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007c1b 	.word	0x08007c1b
 8007b94:	08007c23 	.word	0x08007c23
 8007b98:	08007c7f 	.word	0x08007c7f
 8007b9c:	08007c7f 	.word	0x08007c7f
 8007ba0:	08007c2b 	.word	0x08007c2b
 8007ba4:	08007c7f 	.word	0x08007c7f
 8007ba8:	08007c7f 	.word	0x08007c7f
 8007bac:	08007c7f 	.word	0x08007c7f
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c7f 	.word	0x08007c7f
 8007bb8:	08007c7f 	.word	0x08007c7f
 8007bbc:	08007c7f 	.word	0x08007c7f
 8007bc0:	08007c7f 	.word	0x08007c7f
 8007bc4:	08007c7f 	.word	0x08007c7f
 8007bc8:	08007c7f 	.word	0x08007c7f
 8007bcc:	08007c7f 	.word	0x08007c7f
 8007bd0:	08007c4b 	.word	0x08007c4b
 8007bd4:	08007c7f 	.word	0x08007c7f
 8007bd8:	08007c7f 	.word	0x08007c7f
 8007bdc:	08007c7f 	.word	0x08007c7f
 8007be0:	08007c7f 	.word	0x08007c7f
 8007be4:	08007c7f 	.word	0x08007c7f
 8007be8:	08007c7f 	.word	0x08007c7f
 8007bec:	08007c7f 	.word	0x08007c7f
 8007bf0:	08007c7f 	.word	0x08007c7f
 8007bf4:	08007c7f 	.word	0x08007c7f
 8007bf8:	08007c7f 	.word	0x08007c7f
 8007bfc:	08007c7f 	.word	0x08007c7f
 8007c00:	08007c7f 	.word	0x08007c7f
 8007c04:	08007c7f 	.word	0x08007c7f
 8007c08:	08007c7f 	.word	0x08007c7f
 8007c0c:	08007c7f 	.word	0x08007c7f
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d02e      	beq.n	8007c76 <UART_SetConfig+0x8aa>
 8007c18:	e031      	b.n	8007c7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fc fda5 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c20:	e033      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c22:	f7fc fdb7 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8007c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c28:	e02f      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd ffe6 	bl	8005c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e027      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3a:	f107 0318 	add.w	r3, r7, #24
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe f932 	bl	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c48:	e01f      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d00 <UART_SetConfig+0x934>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c56:	4b2a      	ldr	r3, [pc, #168]	@ (8007d00 <UART_SetConfig+0x934>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	08db      	lsrs	r3, r3, #3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	4a24      	ldr	r2, [pc, #144]	@ (8007cf4 <UART_SetConfig+0x928>)
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c68:	e00f      	b.n	8007c8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c6a:	4b22      	ldr	r3, [pc, #136]	@ (8007cf4 <UART_SetConfig+0x928>)
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6e:	e00c      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c70:	4b21      	ldr	r3, [pc, #132]	@ (8007cf8 <UART_SetConfig+0x92c>)
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c74:	e009      	b.n	8007c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7c:	e005      	b.n	8007c8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 80e7 	beq.w	8007e60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <UART_SetConfig+0x930>)
 8007c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca4:	005a      	lsls	r2, r3, #1
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	441a      	add	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d916      	bls.n	8007cec <UART_SetConfig+0x920>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d212      	bcs.n	8007cec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f023 030f 	bic.w	r3, r3, #15
 8007cce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	e0b9      	b.n	8007e60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cf2:	e0b5      	b.n	8007e60 <UART_SetConfig+0xa94>
 8007cf4:	03d09000 	.word	0x03d09000
 8007cf8:	003d0900 	.word	0x003d0900
 8007cfc:	08008fd4 	.word	0x08008fd4
 8007d00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	dc49      	bgt.n	8007da0 <UART_SetConfig+0x9d4>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	db7c      	blt.n	8007e0a <UART_SetConfig+0xa3e>
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d87a      	bhi.n	8007e0a <UART_SetConfig+0xa3e>
 8007d14:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0x950>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007da7 	.word	0x08007da7
 8007d20:	08007daf 	.word	0x08007daf
 8007d24:	08007e0b 	.word	0x08007e0b
 8007d28:	08007e0b 	.word	0x08007e0b
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007e0b 	.word	0x08007e0b
 8007d34:	08007e0b 	.word	0x08007e0b
 8007d38:	08007e0b 	.word	0x08007e0b
 8007d3c:	08007dc7 	.word	0x08007dc7
 8007d40:	08007e0b 	.word	0x08007e0b
 8007d44:	08007e0b 	.word	0x08007e0b
 8007d48:	08007e0b 	.word	0x08007e0b
 8007d4c:	08007e0b 	.word	0x08007e0b
 8007d50:	08007e0b 	.word	0x08007e0b
 8007d54:	08007e0b 	.word	0x08007e0b
 8007d58:	08007e0b 	.word	0x08007e0b
 8007d5c:	08007dd7 	.word	0x08007dd7
 8007d60:	08007e0b 	.word	0x08007e0b
 8007d64:	08007e0b 	.word	0x08007e0b
 8007d68:	08007e0b 	.word	0x08007e0b
 8007d6c:	08007e0b 	.word	0x08007e0b
 8007d70:	08007e0b 	.word	0x08007e0b
 8007d74:	08007e0b 	.word	0x08007e0b
 8007d78:	08007e0b 	.word	0x08007e0b
 8007d7c:	08007e0b 	.word	0x08007e0b
 8007d80:	08007e0b 	.word	0x08007e0b
 8007d84:	08007e0b 	.word	0x08007e0b
 8007d88:	08007e0b 	.word	0x08007e0b
 8007d8c:	08007e0b 	.word	0x08007e0b
 8007d90:	08007e0b 	.word	0x08007e0b
 8007d94:	08007e0b 	.word	0x08007e0b
 8007d98:	08007e0b 	.word	0x08007e0b
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	d02e      	beq.n	8007e02 <UART_SetConfig+0xa36>
 8007da4:	e031      	b.n	8007e0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da6:	f7fc fcdf 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8007daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dac:	e033      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dae:	f7fc fcf1 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8007db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007db4:	e02f      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd ff20 	bl	8005c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e027      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc6:	f107 0318 	add.w	r3, r7, #24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe f86c 	bl	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e01f      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e8c <UART_SetConfig+0xac0>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d009      	beq.n	8007df6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007de2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e8c <UART_SetConfig+0xac0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a28      	ldr	r2, [pc, #160]	@ (8007e90 <UART_SetConfig+0xac4>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df4:	e00f      	b.n	8007e16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007df6:	4b26      	ldr	r3, [pc, #152]	@ (8007e90 <UART_SetConfig+0xac4>)
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e00c      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dfc:	4b25      	ldr	r3, [pc, #148]	@ (8007e94 <UART_SetConfig+0xac8>)
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e00:	e009      	b.n	8007e16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e005      	b.n	8007e16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e14:	bf00      	nop
    }

    if (pclk != 0U)
 8007e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d021      	beq.n	8007e60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e20:	4a1d      	ldr	r2, [pc, #116]	@ (8007e98 <UART_SetConfig+0xacc>)
 8007e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	441a      	add	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d909      	bls.n	8007e5a <UART_SetConfig+0xa8e>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e4c:	d205      	bcs.n	8007e5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	e002      	b.n	8007e60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2200      	movs	r2, #0
 8007e74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3748      	adds	r7, #72	@ 0x48
 8007e84:	46bd      	mov	sp, r7
 8007e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e8a:	bf00      	nop
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	03d09000 	.word	0x03d09000
 8007e94:	003d0900 	.word	0x003d0900
 8007e98:	08008fd4 	.word	0x08008fd4

08007e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f9a:	d10a      	bne.n	8007fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b098      	sub	sp, #96	@ 0x60
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff0:	f7f9 fcd8 	bl	80019a4 <HAL_GetTick>
 8007ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d12f      	bne.n	8008064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f88e 	bl	8008134 <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d022      	beq.n	8008064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	653b      	str	r3, [r7, #80]	@ 0x50
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800803c:	647b      	str	r3, [r7, #68]	@ 0x44
 800803e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e063      	b.n	800812c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b04      	cmp	r3, #4
 8008070:	d149      	bne.n	8008106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800807a:	2200      	movs	r2, #0
 800807c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f857 	bl	8008134 <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d03c      	beq.n	8008106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	623b      	str	r3, [r7, #32]
   return(result);
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e6      	bne.n	800808c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080de:	61fa      	str	r2, [r7, #28]
 80080e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	69b9      	ldr	r1, [r7, #24]
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	617b      	str	r3, [r7, #20]
   return(result);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e5      	bne.n	80080be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e012      	b.n	800812c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3758      	adds	r7, #88	@ 0x58
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008144:	e04f      	b.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d04b      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814e:	f7f9 fc29 	bl	80019a4 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	429a      	cmp	r2, r3
 800815c:	d302      	bcc.n	8008164 <UART_WaitOnFlagUntilTimeout+0x30>
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e04e      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d037      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b80      	cmp	r3, #128	@ 0x80
 800817a:	d034      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b40      	cmp	r3, #64	@ 0x40
 8008180:	d031      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b08      	cmp	r3, #8
 800818e:	d110      	bne.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2208      	movs	r2, #8
 8008196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f839 	bl	8008210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2208      	movs	r2, #8
 80081a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e029      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c0:	d111      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f81f 	bl	8008210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e00f      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	429a      	cmp	r2, r3
 8008202:	d0a0      	beq.n	8008146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b095      	sub	sp, #84	@ 0x54
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800822c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008236:	643b      	str	r3, [r7, #64]	@ 0x40
 8008238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800823c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e6      	bne.n	8008218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	61fb      	str	r3, [r7, #28]
   return(result);
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <UART_EndRxTransfer+0xc8>)
 800825e:	4013      	ands	r3, r2
 8008260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800826a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e5      	bne.n	800824a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d118      	bne.n	80082b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	60bb      	str	r3, [r7, #8]
   return(result);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	647b      	str	r3, [r7, #68]	@ 0x44
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6979      	ldr	r1, [r7, #20]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	613b      	str	r3, [r7, #16]
   return(result);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e6      	bne.n	8008286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082cc:	bf00      	nop
 80082ce:	3754      	adds	r7, #84	@ 0x54
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	effffffe 	.word	0xeffffffe

080082dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff f850 	bl	80073a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	60bb      	str	r3, [r7, #8]
   return(result);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6979      	ldr	r1, [r7, #20]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	613b      	str	r3, [r7, #16]
   return(result);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff f81b 	bl	800738c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008356:	bf00      	nop
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e027      	b.n	8008400 <HAL_UARTEx_DisableFifoMode+0x66>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	@ 0x24
 80083bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800841c:	2b01      	cmp	r3, #1
 800841e:	d101      	bne.n	8008424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008420:	2302      	movs	r3, #2
 8008422:	e02d      	b.n	8008480 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2224      	movs	r2, #36	@ 0x24
 8008430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f84f 	bl	8008504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800849c:	2302      	movs	r3, #2
 800849e:	e02d      	b.n	80084fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2224      	movs	r2, #36	@ 0x24
 80084ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f811 	bl	8008504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008510:	2b00      	cmp	r3, #0
 8008512:	d108      	bne.n	8008526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008524:	e031      	b.n	800858a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008526:	2310      	movs	r3, #16
 8008528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800852a:	2310      	movs	r3, #16
 800852c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	0e5b      	lsrs	r3, r3, #25
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	0f5b      	lsrs	r3, r3, #29
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	7b3a      	ldrb	r2, [r7, #12]
 8008552:	4911      	ldr	r1, [pc, #68]	@ (8008598 <UARTEx_SetNbDataToProcess+0x94>)
 8008554:	5c8a      	ldrb	r2, [r1, r2]
 8008556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800855a:	7b3a      	ldrb	r2, [r7, #12]
 800855c:	490f      	ldr	r1, [pc, #60]	@ (800859c <UARTEx_SetNbDataToProcess+0x98>)
 800855e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008560:	fb93 f3f2 	sdiv	r3, r3, r2
 8008564:	b29a      	uxth	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	4909      	ldr	r1, [pc, #36]	@ (8008598 <UARTEx_SetNbDataToProcess+0x94>)
 8008572:	5c8a      	ldrb	r2, [r1, r2]
 8008574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008578:	7b7a      	ldrb	r2, [r7, #13]
 800857a:	4908      	ldr	r1, [pc, #32]	@ (800859c <UARTEx_SetNbDataToProcess+0x98>)
 800857c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800857e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800858a:	bf00      	nop
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	08008fec 	.word	0x08008fec
 800859c:	08008ff4 	.word	0x08008ff4

080085a0 <sniprintf>:
 80085a0:	b40c      	push	{r2, r3}
 80085a2:	b530      	push	{r4, r5, lr}
 80085a4:	4b17      	ldr	r3, [pc, #92]	@ (8008604 <sniprintf+0x64>)
 80085a6:	1e0c      	subs	r4, r1, #0
 80085a8:	681d      	ldr	r5, [r3, #0]
 80085aa:	b09d      	sub	sp, #116	@ 0x74
 80085ac:	da08      	bge.n	80085c0 <sniprintf+0x20>
 80085ae:	238b      	movs	r3, #139	@ 0x8b
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	b01d      	add	sp, #116	@ 0x74
 80085b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085bc:	b002      	add	sp, #8
 80085be:	4770      	bx	lr
 80085c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085c8:	bf14      	ite	ne
 80085ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80085ce:	4623      	moveq	r3, r4
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085d8:	9002      	str	r0, [sp, #8]
 80085da:	9006      	str	r0, [sp, #24]
 80085dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085e2:	ab21      	add	r3, sp, #132	@ 0x84
 80085e4:	a902      	add	r1, sp, #8
 80085e6:	4628      	mov	r0, r5
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	f000 f995 	bl	8008918 <_svfiprintf_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	bfbc      	itt	lt
 80085f2:	238b      	movlt	r3, #139	@ 0x8b
 80085f4:	602b      	strlt	r3, [r5, #0]
 80085f6:	2c00      	cmp	r4, #0
 80085f8:	d0dd      	beq.n	80085b6 <sniprintf+0x16>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	2200      	movs	r2, #0
 80085fe:	701a      	strb	r2, [r3, #0]
 8008600:	e7d9      	b.n	80085b6 <sniprintf+0x16>
 8008602:	bf00      	nop
 8008604:	240000e8 	.word	0x240000e8

08008608 <memset>:
 8008608:	4402      	add	r2, r0
 800860a:	4603      	mov	r3, r0
 800860c:	4293      	cmp	r3, r2
 800860e:	d100      	bne.n	8008612 <memset+0xa>
 8008610:	4770      	bx	lr
 8008612:	f803 1b01 	strb.w	r1, [r3], #1
 8008616:	e7f9      	b.n	800860c <memset+0x4>

08008618 <__errno>:
 8008618:	4b01      	ldr	r3, [pc, #4]	@ (8008620 <__errno+0x8>)
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	240000e8 	.word	0x240000e8

08008624 <__libc_init_array>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4d0d      	ldr	r5, [pc, #52]	@ (800865c <__libc_init_array+0x38>)
 8008628:	4c0d      	ldr	r4, [pc, #52]	@ (8008660 <__libc_init_array+0x3c>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	2600      	movs	r6, #0
 8008630:	42a6      	cmp	r6, r4
 8008632:	d109      	bne.n	8008648 <__libc_init_array+0x24>
 8008634:	4d0b      	ldr	r5, [pc, #44]	@ (8008664 <__libc_init_array+0x40>)
 8008636:	4c0c      	ldr	r4, [pc, #48]	@ (8008668 <__libc_init_array+0x44>)
 8008638:	f000 fc98 	bl	8008f6c <_init>
 800863c:	1b64      	subs	r4, r4, r5
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	2600      	movs	r6, #0
 8008642:	42a6      	cmp	r6, r4
 8008644:	d105      	bne.n	8008652 <__libc_init_array+0x2e>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f855 3b04 	ldr.w	r3, [r5], #4
 800864c:	4798      	blx	r3
 800864e:	3601      	adds	r6, #1
 8008650:	e7ee      	b.n	8008630 <__libc_init_array+0xc>
 8008652:	f855 3b04 	ldr.w	r3, [r5], #4
 8008656:	4798      	blx	r3
 8008658:	3601      	adds	r6, #1
 800865a:	e7f2      	b.n	8008642 <__libc_init_array+0x1e>
 800865c:	08009038 	.word	0x08009038
 8008660:	08009038 	.word	0x08009038
 8008664:	08009038 	.word	0x08009038
 8008668:	0800903c 	.word	0x0800903c

0800866c <__retarget_lock_acquire_recursive>:
 800866c:	4770      	bx	lr

0800866e <__retarget_lock_release_recursive>:
 800866e:	4770      	bx	lr

08008670 <_free_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4605      	mov	r5, r0
 8008674:	2900      	cmp	r1, #0
 8008676:	d041      	beq.n	80086fc <_free_r+0x8c>
 8008678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867c:	1f0c      	subs	r4, r1, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfb8      	it	lt
 8008682:	18e4      	addlt	r4, r4, r3
 8008684:	f000 f8e0 	bl	8008848 <__malloc_lock>
 8008688:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <_free_r+0x90>)
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x2c>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	4628      	mov	r0, r5
 8008694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008698:	f000 b8dc 	b.w	8008854 <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x42>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	1821      	adds	r1, r4, r0
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1809      	addeq	r1, r1, r0
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x1e>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x4c>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x42>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1850      	adds	r0, r2, r1
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x6c>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	4401      	add	r1, r0
 80086c8:	1850      	adds	r0, r2, r1
 80086ca:	4283      	cmp	r3, r0
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x22>
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	6053      	str	r3, [r2, #4]
 80086d6:	4408      	add	r0, r1
 80086d8:	6010      	str	r0, [r2, #0]
 80086da:	e7da      	b.n	8008692 <_free_r+0x22>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x74>
 80086de:	230c      	movs	r3, #12
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x22>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	1821      	adds	r1, r4, r0
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf04      	itt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	bf04      	itt	eq
 80086f4:	1809      	addeq	r1, r1, r0
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	6054      	str	r4, [r2, #4]
 80086fa:	e7ca      	b.n	8008692 <_free_r+0x22>
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	24000414 	.word	0x24000414

08008704 <sbrk_aligned>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4e0f      	ldr	r6, [pc, #60]	@ (8008744 <sbrk_aligned+0x40>)
 8008708:	460c      	mov	r4, r1
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	4605      	mov	r5, r0
 800870e:	b911      	cbnz	r1, 8008716 <sbrk_aligned+0x12>
 8008710:	f000 fba6 	bl	8008e60 <_sbrk_r>
 8008714:	6030      	str	r0, [r6, #0]
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 fba1 	bl	8008e60 <_sbrk_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d103      	bne.n	800872a <sbrk_aligned+0x26>
 8008722:	f04f 34ff 	mov.w	r4, #4294967295
 8008726:	4620      	mov	r0, r4
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	1cc4      	adds	r4, r0, #3
 800872c:	f024 0403 	bic.w	r4, r4, #3
 8008730:	42a0      	cmp	r0, r4
 8008732:	d0f8      	beq.n	8008726 <sbrk_aligned+0x22>
 8008734:	1a21      	subs	r1, r4, r0
 8008736:	4628      	mov	r0, r5
 8008738:	f000 fb92 	bl	8008e60 <_sbrk_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d1f2      	bne.n	8008726 <sbrk_aligned+0x22>
 8008740:	e7ef      	b.n	8008722 <sbrk_aligned+0x1e>
 8008742:	bf00      	nop
 8008744:	24000410 	.word	0x24000410

08008748 <_malloc_r>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	1ccd      	adds	r5, r1, #3
 800874e:	f025 0503 	bic.w	r5, r5, #3
 8008752:	3508      	adds	r5, #8
 8008754:	2d0c      	cmp	r5, #12
 8008756:	bf38      	it	cc
 8008758:	250c      	movcc	r5, #12
 800875a:	2d00      	cmp	r5, #0
 800875c:	4606      	mov	r6, r0
 800875e:	db01      	blt.n	8008764 <_malloc_r+0x1c>
 8008760:	42a9      	cmp	r1, r5
 8008762:	d904      	bls.n	800876e <_malloc_r+0x26>
 8008764:	230c      	movs	r3, #12
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008844 <_malloc_r+0xfc>
 8008772:	f000 f869 	bl	8008848 <__malloc_lock>
 8008776:	f8d8 3000 	ldr.w	r3, [r8]
 800877a:	461c      	mov	r4, r3
 800877c:	bb44      	cbnz	r4, 80087d0 <_malloc_r+0x88>
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff ffbf 	bl	8008704 <sbrk_aligned>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	4604      	mov	r4, r0
 800878a:	d158      	bne.n	800883e <_malloc_r+0xf6>
 800878c:	f8d8 4000 	ldr.w	r4, [r8]
 8008790:	4627      	mov	r7, r4
 8008792:	2f00      	cmp	r7, #0
 8008794:	d143      	bne.n	800881e <_malloc_r+0xd6>
 8008796:	2c00      	cmp	r4, #0
 8008798:	d04b      	beq.n	8008832 <_malloc_r+0xea>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	4639      	mov	r1, r7
 800879e:	4630      	mov	r0, r6
 80087a0:	eb04 0903 	add.w	r9, r4, r3
 80087a4:	f000 fb5c 	bl	8008e60 <_sbrk_r>
 80087a8:	4581      	cmp	r9, r0
 80087aa:	d142      	bne.n	8008832 <_malloc_r+0xea>
 80087ac:	6821      	ldr	r1, [r4, #0]
 80087ae:	1a6d      	subs	r5, r5, r1
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffa6 	bl	8008704 <sbrk_aligned>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d03a      	beq.n	8008832 <_malloc_r+0xea>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	442b      	add	r3, r5
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	f8d8 3000 	ldr.w	r3, [r8]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	bb62      	cbnz	r2, 8008824 <_malloc_r+0xdc>
 80087ca:	f8c8 7000 	str.w	r7, [r8]
 80087ce:	e00f      	b.n	80087f0 <_malloc_r+0xa8>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	1b52      	subs	r2, r2, r5
 80087d4:	d420      	bmi.n	8008818 <_malloc_r+0xd0>
 80087d6:	2a0b      	cmp	r2, #11
 80087d8:	d917      	bls.n	800880a <_malloc_r+0xc2>
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	42a3      	cmp	r3, r4
 80087de:	6025      	str	r5, [r4, #0]
 80087e0:	bf18      	it	ne
 80087e2:	6059      	strne	r1, [r3, #4]
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	bf08      	it	eq
 80087e8:	f8c8 1000 	streq.w	r1, [r8]
 80087ec:	5162      	str	r2, [r4, r5]
 80087ee:	604b      	str	r3, [r1, #4]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f82f 	bl	8008854 <__malloc_unlock>
 80087f6:	f104 000b 	add.w	r0, r4, #11
 80087fa:	1d23      	adds	r3, r4, #4
 80087fc:	f020 0007 	bic.w	r0, r0, #7
 8008800:	1ac2      	subs	r2, r0, r3
 8008802:	bf1c      	itt	ne
 8008804:	1a1b      	subne	r3, r3, r0
 8008806:	50a3      	strne	r3, [r4, r2]
 8008808:	e7af      	b.n	800876a <_malloc_r+0x22>
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	42a3      	cmp	r3, r4
 800880e:	bf0c      	ite	eq
 8008810:	f8c8 2000 	streq.w	r2, [r8]
 8008814:	605a      	strne	r2, [r3, #4]
 8008816:	e7eb      	b.n	80087f0 <_malloc_r+0xa8>
 8008818:	4623      	mov	r3, r4
 800881a:	6864      	ldr	r4, [r4, #4]
 800881c:	e7ae      	b.n	800877c <_malloc_r+0x34>
 800881e:	463c      	mov	r4, r7
 8008820:	687f      	ldr	r7, [r7, #4]
 8008822:	e7b6      	b.n	8008792 <_malloc_r+0x4a>
 8008824:	461a      	mov	r2, r3
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	42a3      	cmp	r3, r4
 800882a:	d1fb      	bne.n	8008824 <_malloc_r+0xdc>
 800882c:	2300      	movs	r3, #0
 800882e:	6053      	str	r3, [r2, #4]
 8008830:	e7de      	b.n	80087f0 <_malloc_r+0xa8>
 8008832:	230c      	movs	r3, #12
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	4630      	mov	r0, r6
 8008838:	f000 f80c 	bl	8008854 <__malloc_unlock>
 800883c:	e794      	b.n	8008768 <_malloc_r+0x20>
 800883e:	6005      	str	r5, [r0, #0]
 8008840:	e7d6      	b.n	80087f0 <_malloc_r+0xa8>
 8008842:	bf00      	nop
 8008844:	24000414 	.word	0x24000414

08008848 <__malloc_lock>:
 8008848:	4801      	ldr	r0, [pc, #4]	@ (8008850 <__malloc_lock+0x8>)
 800884a:	f7ff bf0f 	b.w	800866c <__retarget_lock_acquire_recursive>
 800884e:	bf00      	nop
 8008850:	2400040c 	.word	0x2400040c

08008854 <__malloc_unlock>:
 8008854:	4801      	ldr	r0, [pc, #4]	@ (800885c <__malloc_unlock+0x8>)
 8008856:	f7ff bf0a 	b.w	800866e <__retarget_lock_release_recursive>
 800885a:	bf00      	nop
 800885c:	2400040c 	.word	0x2400040c

08008860 <__ssputs_r>:
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	688e      	ldr	r6, [r1, #8]
 8008866:	461f      	mov	r7, r3
 8008868:	42be      	cmp	r6, r7
 800886a:	680b      	ldr	r3, [r1, #0]
 800886c:	4682      	mov	sl, r0
 800886e:	460c      	mov	r4, r1
 8008870:	4690      	mov	r8, r2
 8008872:	d82d      	bhi.n	80088d0 <__ssputs_r+0x70>
 8008874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008878:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800887c:	d026      	beq.n	80088cc <__ssputs_r+0x6c>
 800887e:	6965      	ldr	r5, [r4, #20]
 8008880:	6909      	ldr	r1, [r1, #16]
 8008882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008886:	eba3 0901 	sub.w	r9, r3, r1
 800888a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800888e:	1c7b      	adds	r3, r7, #1
 8008890:	444b      	add	r3, r9
 8008892:	106d      	asrs	r5, r5, #1
 8008894:	429d      	cmp	r5, r3
 8008896:	bf38      	it	cc
 8008898:	461d      	movcc	r5, r3
 800889a:	0553      	lsls	r3, r2, #21
 800889c:	d527      	bpl.n	80088ee <__ssputs_r+0x8e>
 800889e:	4629      	mov	r1, r5
 80088a0:	f7ff ff52 	bl	8008748 <_malloc_r>
 80088a4:	4606      	mov	r6, r0
 80088a6:	b360      	cbz	r0, 8008902 <__ssputs_r+0xa2>
 80088a8:	6921      	ldr	r1, [r4, #16]
 80088aa:	464a      	mov	r2, r9
 80088ac:	f000 fae8 	bl	8008e80 <memcpy>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	6126      	str	r6, [r4, #16]
 80088be:	6165      	str	r5, [r4, #20]
 80088c0:	444e      	add	r6, r9
 80088c2:	eba5 0509 	sub.w	r5, r5, r9
 80088c6:	6026      	str	r6, [r4, #0]
 80088c8:	60a5      	str	r5, [r4, #8]
 80088ca:	463e      	mov	r6, r7
 80088cc:	42be      	cmp	r6, r7
 80088ce:	d900      	bls.n	80088d2 <__ssputs_r+0x72>
 80088d0:	463e      	mov	r6, r7
 80088d2:	6820      	ldr	r0, [r4, #0]
 80088d4:	4632      	mov	r2, r6
 80088d6:	4641      	mov	r1, r8
 80088d8:	f000 faa8 	bl	8008e2c <memmove>
 80088dc:	68a3      	ldr	r3, [r4, #8]
 80088de:	1b9b      	subs	r3, r3, r6
 80088e0:	60a3      	str	r3, [r4, #8]
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	4433      	add	r3, r6
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	2000      	movs	r0, #0
 80088ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ee:	462a      	mov	r2, r5
 80088f0:	f000 fad4 	bl	8008e9c <_realloc_r>
 80088f4:	4606      	mov	r6, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1e0      	bne.n	80088bc <__ssputs_r+0x5c>
 80088fa:	6921      	ldr	r1, [r4, #16]
 80088fc:	4650      	mov	r0, sl
 80088fe:	f7ff feb7 	bl	8008670 <_free_r>
 8008902:	230c      	movs	r3, #12
 8008904:	f8ca 3000 	str.w	r3, [sl]
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e7e9      	b.n	80088ea <__ssputs_r+0x8a>
	...

08008918 <_svfiprintf_r>:
 8008918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4698      	mov	r8, r3
 800891e:	898b      	ldrh	r3, [r1, #12]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	b09d      	sub	sp, #116	@ 0x74
 8008924:	4607      	mov	r7, r0
 8008926:	460d      	mov	r5, r1
 8008928:	4614      	mov	r4, r2
 800892a:	d510      	bpl.n	800894e <_svfiprintf_r+0x36>
 800892c:	690b      	ldr	r3, [r1, #16]
 800892e:	b973      	cbnz	r3, 800894e <_svfiprintf_r+0x36>
 8008930:	2140      	movs	r1, #64	@ 0x40
 8008932:	f7ff ff09 	bl	8008748 <_malloc_r>
 8008936:	6028      	str	r0, [r5, #0]
 8008938:	6128      	str	r0, [r5, #16]
 800893a:	b930      	cbnz	r0, 800894a <_svfiprintf_r+0x32>
 800893c:	230c      	movs	r3, #12
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	b01d      	add	sp, #116	@ 0x74
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894a:	2340      	movs	r3, #64	@ 0x40
 800894c:	616b      	str	r3, [r5, #20]
 800894e:	2300      	movs	r3, #0
 8008950:	9309      	str	r3, [sp, #36]	@ 0x24
 8008952:	2320      	movs	r3, #32
 8008954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008958:	f8cd 800c 	str.w	r8, [sp, #12]
 800895c:	2330      	movs	r3, #48	@ 0x30
 800895e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008afc <_svfiprintf_r+0x1e4>
 8008962:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008966:	f04f 0901 	mov.w	r9, #1
 800896a:	4623      	mov	r3, r4
 800896c:	469a      	mov	sl, r3
 800896e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008972:	b10a      	cbz	r2, 8008978 <_svfiprintf_r+0x60>
 8008974:	2a25      	cmp	r2, #37	@ 0x25
 8008976:	d1f9      	bne.n	800896c <_svfiprintf_r+0x54>
 8008978:	ebba 0b04 	subs.w	fp, sl, r4
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x7e>
 800897e:	465b      	mov	r3, fp
 8008980:	4622      	mov	r2, r4
 8008982:	4629      	mov	r1, r5
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ff6b 	bl	8008860 <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80a7 	beq.w	8008ade <_svfiprintf_r+0x1c6>
 8008990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008992:	445a      	add	r2, fp
 8008994:	9209      	str	r2, [sp, #36]	@ 0x24
 8008996:	f89a 3000 	ldrb.w	r3, [sl]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 809f 	beq.w	8008ade <_svfiprintf_r+0x1c6>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089aa:	f10a 0a01 	add.w	sl, sl, #1
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80089b8:	4654      	mov	r4, sl
 80089ba:	2205      	movs	r2, #5
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	484e      	ldr	r0, [pc, #312]	@ (8008afc <_svfiprintf_r+0x1e4>)
 80089c2:	f7f7 fc8d 	bl	80002e0 <memchr>
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	b9d8      	cbnz	r0, 8008a02 <_svfiprintf_r+0xea>
 80089ca:	06d0      	lsls	r0, r2, #27
 80089cc:	bf44      	itt	mi
 80089ce:	2320      	movmi	r3, #32
 80089d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d4:	0711      	lsls	r1, r2, #28
 80089d6:	bf44      	itt	mi
 80089d8:	232b      	movmi	r3, #43	@ 0x2b
 80089da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089de:	f89a 3000 	ldrb.w	r3, [sl]
 80089e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80089e4:	d015      	beq.n	8008a12 <_svfiprintf_r+0xfa>
 80089e6:	9a07      	ldr	r2, [sp, #28]
 80089e8:	4654      	mov	r4, sl
 80089ea:	2000      	movs	r0, #0
 80089ec:	f04f 0c0a 	mov.w	ip, #10
 80089f0:	4621      	mov	r1, r4
 80089f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f6:	3b30      	subs	r3, #48	@ 0x30
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	d94b      	bls.n	8008a94 <_svfiprintf_r+0x17c>
 80089fc:	b1b0      	cbz	r0, 8008a2c <_svfiprintf_r+0x114>
 80089fe:	9207      	str	r2, [sp, #28]
 8008a00:	e014      	b.n	8008a2c <_svfiprintf_r+0x114>
 8008a02:	eba0 0308 	sub.w	r3, r0, r8
 8008a06:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	46a2      	mov	sl, r4
 8008a10:	e7d2      	b.n	80089b8 <_svfiprintf_r+0xa0>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9103      	str	r1, [sp, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfbb      	ittet	lt
 8008a1e:	425b      	neglt	r3, r3
 8008a20:	f042 0202 	orrlt.w	r2, r2, #2
 8008a24:	9307      	strge	r3, [sp, #28]
 8008a26:	9307      	strlt	r3, [sp, #28]
 8008a28:	bfb8      	it	lt
 8008a2a:	9204      	strlt	r2, [sp, #16]
 8008a2c:	7823      	ldrb	r3, [r4, #0]
 8008a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a30:	d10a      	bne.n	8008a48 <_svfiprintf_r+0x130>
 8008a32:	7863      	ldrb	r3, [r4, #1]
 8008a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a36:	d132      	bne.n	8008a9e <_svfiprintf_r+0x186>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a44:	3402      	adds	r4, #2
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b0c <_svfiprintf_r+0x1f4>
 8008a4c:	7821      	ldrb	r1, [r4, #0]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	4650      	mov	r0, sl
 8008a52:	f7f7 fc45 	bl	80002e0 <memchr>
 8008a56:	b138      	cbz	r0, 8008a68 <_svfiprintf_r+0x150>
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	eba0 000a 	sub.w	r0, r0, sl
 8008a5e:	2240      	movs	r2, #64	@ 0x40
 8008a60:	4082      	lsls	r2, r0
 8008a62:	4313      	orrs	r3, r2
 8008a64:	3401      	adds	r4, #1
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6c:	4824      	ldr	r0, [pc, #144]	@ (8008b00 <_svfiprintf_r+0x1e8>)
 8008a6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a72:	2206      	movs	r2, #6
 8008a74:	f7f7 fc34 	bl	80002e0 <memchr>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d036      	beq.n	8008aea <_svfiprintf_r+0x1d2>
 8008a7c:	4b21      	ldr	r3, [pc, #132]	@ (8008b04 <_svfiprintf_r+0x1ec>)
 8008a7e:	bb1b      	cbnz	r3, 8008ac8 <_svfiprintf_r+0x1b0>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	3307      	adds	r3, #7
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	3308      	adds	r3, #8
 8008a8a:	9303      	str	r3, [sp, #12]
 8008a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8e:	4433      	add	r3, r6
 8008a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a92:	e76a      	b.n	800896a <_svfiprintf_r+0x52>
 8008a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a98:	460c      	mov	r4, r1
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	e7a8      	b.n	80089f0 <_svfiprintf_r+0xd8>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	3401      	adds	r4, #1
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f04f 0c0a 	mov.w	ip, #10
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab0:	3a30      	subs	r2, #48	@ 0x30
 8008ab2:	2a09      	cmp	r2, #9
 8008ab4:	d903      	bls.n	8008abe <_svfiprintf_r+0x1a6>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c6      	beq.n	8008a48 <_svfiprintf_r+0x130>
 8008aba:	9105      	str	r1, [sp, #20]
 8008abc:	e7c4      	b.n	8008a48 <_svfiprintf_r+0x130>
 8008abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e7f0      	b.n	8008aaa <_svfiprintf_r+0x192>
 8008ac8:	ab03      	add	r3, sp, #12
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	462a      	mov	r2, r5
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <_svfiprintf_r+0x1f0>)
 8008ad0:	a904      	add	r1, sp, #16
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	1c42      	adds	r2, r0, #1
 8008ada:	4606      	mov	r6, r0
 8008adc:	d1d6      	bne.n	8008a8c <_svfiprintf_r+0x174>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	065b      	lsls	r3, r3, #25
 8008ae2:	f53f af2d 	bmi.w	8008940 <_svfiprintf_r+0x28>
 8008ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae8:	e72c      	b.n	8008944 <_svfiprintf_r+0x2c>
 8008aea:	ab03      	add	r3, sp, #12
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	462a      	mov	r2, r5
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <_svfiprintf_r+0x1f0>)
 8008af2:	a904      	add	r1, sp, #16
 8008af4:	4638      	mov	r0, r7
 8008af6:	f000 f879 	bl	8008bec <_printf_i>
 8008afa:	e7ed      	b.n	8008ad8 <_svfiprintf_r+0x1c0>
 8008afc:	08008ffc 	.word	0x08008ffc
 8008b00:	08009006 	.word	0x08009006
 8008b04:	00000000 	.word	0x00000000
 8008b08:	08008861 	.word	0x08008861
 8008b0c:	08009002 	.word	0x08009002

08008b10 <_printf_common>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	4616      	mov	r6, r2
 8008b16:	4698      	mov	r8, r3
 8008b18:	688a      	ldr	r2, [r1, #8]
 8008b1a:	690b      	ldr	r3, [r1, #16]
 8008b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bfb8      	it	lt
 8008b24:	4613      	movlt	r3, r2
 8008b26:	6033      	str	r3, [r6, #0]
 8008b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b10a      	cbz	r2, 8008b36 <_printf_common+0x26>
 8008b32:	3301      	adds	r3, #1
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	0699      	lsls	r1, r3, #26
 8008b3a:	bf42      	ittt	mi
 8008b3c:	6833      	ldrmi	r3, [r6, #0]
 8008b3e:	3302      	addmi	r3, #2
 8008b40:	6033      	strmi	r3, [r6, #0]
 8008b42:	6825      	ldr	r5, [r4, #0]
 8008b44:	f015 0506 	ands.w	r5, r5, #6
 8008b48:	d106      	bne.n	8008b58 <_printf_common+0x48>
 8008b4a:	f104 0a19 	add.w	sl, r4, #25
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	6832      	ldr	r2, [r6, #0]
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	dc26      	bgt.n	8008ba6 <_printf_common+0x96>
 8008b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	3b00      	subs	r3, #0
 8008b60:	bf18      	it	ne
 8008b62:	2301      	movne	r3, #1
 8008b64:	0692      	lsls	r2, r2, #26
 8008b66:	d42b      	bmi.n	8008bc0 <_printf_common+0xb0>
 8008b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c8      	blx	r9
 8008b72:	3001      	adds	r0, #1
 8008b74:	d01e      	beq.n	8008bb4 <_printf_common+0xa4>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	6922      	ldr	r2, [r4, #16]
 8008b7a:	f003 0306 	and.w	r3, r3, #6
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	bf02      	ittt	eq
 8008b82:	68e5      	ldreq	r5, [r4, #12]
 8008b84:	6833      	ldreq	r3, [r6, #0]
 8008b86:	1aed      	subeq	r5, r5, r3
 8008b88:	68a3      	ldr	r3, [r4, #8]
 8008b8a:	bf0c      	ite	eq
 8008b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b90:	2500      	movne	r5, #0
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bfc4      	itt	gt
 8008b96:	1a9b      	subgt	r3, r3, r2
 8008b98:	18ed      	addgt	r5, r5, r3
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	341a      	adds	r4, #26
 8008b9e:	42b5      	cmp	r5, r6
 8008ba0:	d11a      	bne.n	8008bd8 <_printf_common+0xc8>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e008      	b.n	8008bb8 <_printf_common+0xa8>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4652      	mov	r2, sl
 8008baa:	4641      	mov	r1, r8
 8008bac:	4638      	mov	r0, r7
 8008bae:	47c8      	blx	r9
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d103      	bne.n	8008bbc <_printf_common+0xac>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	e7c6      	b.n	8008b4e <_printf_common+0x3e>
 8008bc0:	18e1      	adds	r1, r4, r3
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	2030      	movs	r0, #48	@ 0x30
 8008bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bca:	4422      	add	r2, r4
 8008bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	e7c7      	b.n	8008b68 <_printf_common+0x58>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4641      	mov	r1, r8
 8008bde:	4638      	mov	r0, r7
 8008be0:	47c8      	blx	r9
 8008be2:	3001      	adds	r0, #1
 8008be4:	d0e6      	beq.n	8008bb4 <_printf_common+0xa4>
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7d9      	b.n	8008b9e <_printf_common+0x8e>
	...

08008bec <_printf_i>:
 8008bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	7e0f      	ldrb	r7, [r1, #24]
 8008bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bf4:	2f78      	cmp	r7, #120	@ 0x78
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c02:	d807      	bhi.n	8008c14 <_printf_i+0x28>
 8008c04:	2f62      	cmp	r7, #98	@ 0x62
 8008c06:	d80a      	bhi.n	8008c1e <_printf_i+0x32>
 8008c08:	2f00      	cmp	r7, #0
 8008c0a:	f000 80d2 	beq.w	8008db2 <_printf_i+0x1c6>
 8008c0e:	2f58      	cmp	r7, #88	@ 0x58
 8008c10:	f000 80b9 	beq.w	8008d86 <_printf_i+0x19a>
 8008c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c1c:	e03a      	b.n	8008c94 <_printf_i+0xa8>
 8008c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c22:	2b15      	cmp	r3, #21
 8008c24:	d8f6      	bhi.n	8008c14 <_printf_i+0x28>
 8008c26:	a101      	add	r1, pc, #4	@ (adr r1, 8008c2c <_printf_i+0x40>)
 8008c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c15 	.word	0x08008c15
 8008c38:	08008c15 	.word	0x08008c15
 8008c3c:	08008c15 	.word	0x08008c15
 8008c40:	08008c15 	.word	0x08008c15
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008c15 	.word	0x08008c15
 8008c4c:	08008c15 	.word	0x08008c15
 8008c50:	08008c15 	.word	0x08008c15
 8008c54:	08008c15 	.word	0x08008c15
 8008c58:	08008d99 	.word	0x08008d99
 8008c5c:	08008cc3 	.word	0x08008cc3
 8008c60:	08008d53 	.word	0x08008d53
 8008c64:	08008c15 	.word	0x08008c15
 8008c68:	08008c15 	.word	0x08008c15
 8008c6c:	08008dbb 	.word	0x08008dbb
 8008c70:	08008c15 	.word	0x08008c15
 8008c74:	08008cc3 	.word	0x08008cc3
 8008c78:	08008c15 	.word	0x08008c15
 8008c7c:	08008c15 	.word	0x08008c15
 8008c80:	08008d5b 	.word	0x08008d5b
 8008c84:	6833      	ldr	r3, [r6, #0]
 8008c86:	1d1a      	adds	r2, r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6032      	str	r2, [r6, #0]
 8008c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c94:	2301      	movs	r3, #1
 8008c96:	e09d      	b.n	8008dd4 <_printf_i+0x1e8>
 8008c98:	6833      	ldr	r3, [r6, #0]
 8008c9a:	6820      	ldr	r0, [r4, #0]
 8008c9c:	1d19      	adds	r1, r3, #4
 8008c9e:	6031      	str	r1, [r6, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0xbc>
 8008ca4:	681d      	ldr	r5, [r3, #0]
 8008ca6:	e003      	b.n	8008cb0 <_printf_i+0xc4>
 8008ca8:	0645      	lsls	r5, r0, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0xb8>
 8008cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	da03      	bge.n	8008cbc <_printf_i+0xd0>
 8008cb4:	232d      	movs	r3, #45	@ 0x2d
 8008cb6:	426d      	negs	r5, r5
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cbc:	4859      	ldr	r0, [pc, #356]	@ (8008e24 <_printf_i+0x238>)
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	e011      	b.n	8008ce6 <_printf_i+0xfa>
 8008cc2:	6821      	ldr	r1, [r4, #0]
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	0608      	lsls	r0, r1, #24
 8008cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ccc:	d402      	bmi.n	8008cd4 <_printf_i+0xe8>
 8008cce:	0649      	lsls	r1, r1, #25
 8008cd0:	bf48      	it	mi
 8008cd2:	b2ad      	uxthmi	r5, r5
 8008cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cd6:	4853      	ldr	r0, [pc, #332]	@ (8008e24 <_printf_i+0x238>)
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	bf14      	ite	ne
 8008cdc:	230a      	movne	r3, #10
 8008cde:	2308      	moveq	r3, #8
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ce6:	6866      	ldr	r6, [r4, #4]
 8008ce8:	60a6      	str	r6, [r4, #8]
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	bfa2      	ittt	ge
 8008cee:	6821      	ldrge	r1, [r4, #0]
 8008cf0:	f021 0104 	bicge.w	r1, r1, #4
 8008cf4:	6021      	strge	r1, [r4, #0]
 8008cf6:	b90d      	cbnz	r5, 8008cfc <_printf_i+0x110>
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	d04b      	beq.n	8008d94 <_printf_i+0x1a8>
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d02:	fb03 5711 	mls	r7, r3, r1, r5
 8008d06:	5dc7      	ldrb	r7, [r0, r7]
 8008d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d0c:	462f      	mov	r7, r5
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	460d      	mov	r5, r1
 8008d12:	d9f4      	bls.n	8008cfe <_printf_i+0x112>
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d10b      	bne.n	8008d30 <_printf_i+0x144>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	07df      	lsls	r7, r3, #31
 8008d1c:	d508      	bpl.n	8008d30 <_printf_i+0x144>
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	4299      	cmp	r1, r3
 8008d24:	bfde      	ittt	le
 8008d26:	2330      	movle	r3, #48	@ 0x30
 8008d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d30:	1b92      	subs	r2, r2, r6
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	f8cd a000 	str.w	sl, [sp]
 8008d38:	464b      	mov	r3, r9
 8008d3a:	aa03      	add	r2, sp, #12
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7ff fee6 	bl	8008b10 <_printf_common>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d14a      	bne.n	8008dde <_printf_i+0x1f2>
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	b004      	add	sp, #16
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	f043 0320 	orr.w	r3, r3, #32
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	4833      	ldr	r0, [pc, #204]	@ (8008e28 <_printf_i+0x23c>)
 8008d5c:	2778      	movs	r7, #120	@ 0x78
 8008d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	6831      	ldr	r1, [r6, #0]
 8008d66:	061f      	lsls	r7, r3, #24
 8008d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d6c:	d402      	bmi.n	8008d74 <_printf_i+0x188>
 8008d6e:	065f      	lsls	r7, r3, #25
 8008d70:	bf48      	it	mi
 8008d72:	b2ad      	uxthmi	r5, r5
 8008d74:	6031      	str	r1, [r6, #0]
 8008d76:	07d9      	lsls	r1, r3, #31
 8008d78:	bf44      	itt	mi
 8008d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7e:	6023      	strmi	r3, [r4, #0]
 8008d80:	b11d      	cbz	r5, 8008d8a <_printf_i+0x19e>
 8008d82:	2310      	movs	r3, #16
 8008d84:	e7ac      	b.n	8008ce0 <_printf_i+0xf4>
 8008d86:	4827      	ldr	r0, [pc, #156]	@ (8008e24 <_printf_i+0x238>)
 8008d88:	e7e9      	b.n	8008d5e <_printf_i+0x172>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f023 0320 	bic.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	e7f6      	b.n	8008d82 <_printf_i+0x196>
 8008d94:	4616      	mov	r6, r2
 8008d96:	e7bd      	b.n	8008d14 <_printf_i+0x128>
 8008d98:	6833      	ldr	r3, [r6, #0]
 8008d9a:	6825      	ldr	r5, [r4, #0]
 8008d9c:	6961      	ldr	r1, [r4, #20]
 8008d9e:	1d18      	adds	r0, r3, #4
 8008da0:	6030      	str	r0, [r6, #0]
 8008da2:	062e      	lsls	r6, r5, #24
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	d501      	bpl.n	8008dac <_printf_i+0x1c0>
 8008da8:	6019      	str	r1, [r3, #0]
 8008daa:	e002      	b.n	8008db2 <_printf_i+0x1c6>
 8008dac:	0668      	lsls	r0, r5, #25
 8008dae:	d5fb      	bpl.n	8008da8 <_printf_i+0x1bc>
 8008db0:	8019      	strh	r1, [r3, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	6123      	str	r3, [r4, #16]
 8008db6:	4616      	mov	r6, r2
 8008db8:	e7bc      	b.n	8008d34 <_printf_i+0x148>
 8008dba:	6833      	ldr	r3, [r6, #0]
 8008dbc:	1d1a      	adds	r2, r3, #4
 8008dbe:	6032      	str	r2, [r6, #0]
 8008dc0:	681e      	ldr	r6, [r3, #0]
 8008dc2:	6862      	ldr	r2, [r4, #4]
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f7f7 fa8a 	bl	80002e0 <memchr>
 8008dcc:	b108      	cbz	r0, 8008dd2 <_printf_i+0x1e6>
 8008dce:	1b80      	subs	r0, r0, r6
 8008dd0:	6060      	str	r0, [r4, #4]
 8008dd2:	6863      	ldr	r3, [r4, #4]
 8008dd4:	6123      	str	r3, [r4, #16]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ddc:	e7aa      	b.n	8008d34 <_printf_i+0x148>
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	4632      	mov	r2, r6
 8008de2:	4649      	mov	r1, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	47d0      	blx	sl
 8008de8:	3001      	adds	r0, #1
 8008dea:	d0ad      	beq.n	8008d48 <_printf_i+0x15c>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	079b      	lsls	r3, r3, #30
 8008df0:	d413      	bmi.n	8008e1a <_printf_i+0x22e>
 8008df2:	68e0      	ldr	r0, [r4, #12]
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	4298      	cmp	r0, r3
 8008df8:	bfb8      	it	lt
 8008dfa:	4618      	movlt	r0, r3
 8008dfc:	e7a6      	b.n	8008d4c <_printf_i+0x160>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4632      	mov	r2, r6
 8008e02:	4649      	mov	r1, r9
 8008e04:	4640      	mov	r0, r8
 8008e06:	47d0      	blx	sl
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d09d      	beq.n	8008d48 <_printf_i+0x15c>
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	9903      	ldr	r1, [sp, #12]
 8008e12:	1a5b      	subs	r3, r3, r1
 8008e14:	42ab      	cmp	r3, r5
 8008e16:	dcf2      	bgt.n	8008dfe <_printf_i+0x212>
 8008e18:	e7eb      	b.n	8008df2 <_printf_i+0x206>
 8008e1a:	2500      	movs	r5, #0
 8008e1c:	f104 0619 	add.w	r6, r4, #25
 8008e20:	e7f5      	b.n	8008e0e <_printf_i+0x222>
 8008e22:	bf00      	nop
 8008e24:	0800900d 	.word	0x0800900d
 8008e28:	0800901e 	.word	0x0800901e

08008e2c <memmove>:
 8008e2c:	4288      	cmp	r0, r1
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	eb01 0402 	add.w	r4, r1, r2
 8008e34:	d902      	bls.n	8008e3c <memmove+0x10>
 8008e36:	4284      	cmp	r4, r0
 8008e38:	4623      	mov	r3, r4
 8008e3a:	d807      	bhi.n	8008e4c <memmove+0x20>
 8008e3c:	1e43      	subs	r3, r0, #1
 8008e3e:	42a1      	cmp	r1, r4
 8008e40:	d008      	beq.n	8008e54 <memmove+0x28>
 8008e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e4a:	e7f8      	b.n	8008e3e <memmove+0x12>
 8008e4c:	4402      	add	r2, r0
 8008e4e:	4601      	mov	r1, r0
 8008e50:	428a      	cmp	r2, r1
 8008e52:	d100      	bne.n	8008e56 <memmove+0x2a>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e5e:	e7f7      	b.n	8008e50 <memmove+0x24>

08008e60 <_sbrk_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d06      	ldr	r5, [pc, #24]	@ (8008e7c <_sbrk_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7f8 fcb4 	bl	80017d8 <_sbrk>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_sbrk_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_sbrk_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	24000408 	.word	0x24000408

08008e80 <memcpy>:
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	4770      	bx	lr
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d1f9      	bne.n	8008e8e <memcpy+0xe>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <_realloc_r>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4615      	mov	r5, r2
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	b921      	cbnz	r1, 8008eb2 <_realloc_r+0x16>
 8008ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	4611      	mov	r1, r2
 8008eae:	f7ff bc4b 	b.w	8008748 <_malloc_r>
 8008eb2:	b92a      	cbnz	r2, 8008ec0 <_realloc_r+0x24>
 8008eb4:	f7ff fbdc 	bl	8008670 <_free_r>
 8008eb8:	2400      	movs	r4, #0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec0:	f000 f81a 	bl	8008ef8 <_malloc_usable_size_r>
 8008ec4:	4285      	cmp	r5, r0
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	d802      	bhi.n	8008ed0 <_realloc_r+0x34>
 8008eca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ece:	d8f4      	bhi.n	8008eba <_realloc_r+0x1e>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f7ff fc38 	bl	8008748 <_malloc_r>
 8008ed8:	4607      	mov	r7, r0
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d0ec      	beq.n	8008eb8 <_realloc_r+0x1c>
 8008ede:	42b5      	cmp	r5, r6
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	bf28      	it	cs
 8008ee6:	4632      	movcs	r2, r6
 8008ee8:	f7ff ffca 	bl	8008e80 <memcpy>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f7ff fbbe 	bl	8008670 <_free_r>
 8008ef4:	463c      	mov	r4, r7
 8008ef6:	e7e0      	b.n	8008eba <_realloc_r+0x1e>

08008ef8 <_malloc_usable_size_r>:
 8008ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efc:	1f18      	subs	r0, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	bfbc      	itt	lt
 8008f02:	580b      	ldrlt	r3, [r1, r0]
 8008f04:	18c0      	addlt	r0, r0, r3
 8008f06:	4770      	bx	lr

08008f08 <trunc>:
 8008f08:	ee10 0a90 	vmov	r0, s1
 8008f0c:	f3c0 520a 	ubfx	r2, r0, #20, #11
 8008f10:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 8008f14:	2b13      	cmp	r3, #19
 8008f16:	b530      	push	{r4, r5, lr}
 8008f18:	dc10      	bgt.n	8008f3c <trunc+0x34>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bfa4      	itt	ge
 8008f1e:	4912      	ldrge	r1, [pc, #72]	@ (8008f68 <trunc+0x60>)
 8008f20:	4119      	asrge	r1, r3
 8008f22:	f000 4400 	and.w	r4, r0, #2147483648	@ 0x80000000
 8008f26:	bfad      	iteet	ge
 8008f28:	4001      	andge	r1, r0
 8008f2a:	2200      	movlt	r2, #0
 8008f2c:	4623      	movlt	r3, r4
 8008f2e:	2200      	movge	r2, #0
 8008f30:	bfa8      	it	ge
 8008f32:	ea41 0304 	orrge.w	r3, r1, r4
 8008f36:	ec43 2b10 	vmov	d0, r2, r3
 8008f3a:	bd30      	pop	{r4, r5, pc}
 8008f3c:	2b33      	cmp	r3, #51	@ 0x33
 8008f3e:	dd05      	ble.n	8008f4c <trunc+0x44>
 8008f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f44:	d1f9      	bne.n	8008f3a <trunc+0x32>
 8008f46:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008f4a:	e7f6      	b.n	8008f3a <trunc+0x32>
 8008f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f50:	f2a2 4213 	subw	r2, r2, #1043	@ 0x413
 8008f54:	fa23 f202 	lsr.w	r2, r3, r2
 8008f58:	ee10 3a10 	vmov	r3, s0
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	ea23 0402 	bic.w	r4, r3, r2
 8008f62:	ec45 4b10 	vmov	d0, r4, r5
 8008f66:	e7e8      	b.n	8008f3a <trunc+0x32>
 8008f68:	fff00000 	.word	0xfff00000

08008f6c <_init>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr

08008f78 <_fini>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr
